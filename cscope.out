cscope 15 /work_base/Riscv-FreeRTOS10V -q 0000000691 0000071054
	@Common/include/FreeRTOS.h

1 
	#p‹tYIELD_WITHIN_API
 
p‹tYIELD


	)

2 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

	@Common/include/common.h

1 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

2 
	tUBa£Ty≥_t
;

3 
uöt32_t
 
	tTickTy≥_t
;

4 
	#öt8_t
 

	)

5 
	#uöt8_t
 

	)

6 
	#uöt16_t
 

	)

7 
	#uöt32_t
 

	)

8 
	#uöt64_t
 

	)

9 
	tBa£Ty≥_t
;

11 
	#SèckTy≥_t
 
uöt32_t


	)

12 
	#p‹tPRIVILEGE_BIT
 ( ( 
UBa£Ty≥_t
 ) 0x00 )

	)

13 
	#pdFALSE
 
Ál£


	)

14 
	#pdTRUE
 
åue


	)

15 
	#pdPASS
 ( 
pdTRUE
 )

	)

17 
	#size_t
 

	)

18 
	#c⁄figMAX_PRIORITIES
 ( 30 )

	)

19 
	#p‹tPOINTER_SIZE_TYPE
 

	)

20 
	#c⁄figMAX_TASK_NAME_LEN
 ( 16 )

	)

21 
	#c⁄figINITIAL_TICK_COUNT
 0

	)

22 
	#îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
 ( -1 )

	)

23 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

	@Common/include/list.h

1 #i‚de‡
LIST_H


2 
	#LIST_H


	)

4 #i‚de‡
c⁄figLIST_VOLATILE


5 
	#c⁄figLIST_VOLATILE


	)

9 #ifde‡
__˝lu•lus


13 
	#li°FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE


	)

14 
	#li°SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE


	)

20 
xLIST
;

21 
	sxLIST_ITEM


23 
li°FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE


24 
c⁄figLIST_VOLATILE
 
TickTy≥_t
 
xIãmVÆue
;

25 
xLIST_ITEM
 * 
c⁄figLIST_VOLATILE
 
pxNext
;

26 
xLIST_ITEM
 * 
c⁄figLIST_VOLATILE
 
pxPªvious
;

27 * 
pvOw√r
;

28 
xLIST
 * 
c⁄figLIST_VOLATILE
 
pxC⁄èöî
;

29 
li°SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE


31 
xLIST_ITEM
 
	tLi°Iãm_t
;

33 
	sxMINI_LIST_ITEM


35 
li°FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE


36 
c⁄figLIST_VOLATILE
 
TickTy≥_t
 
xIãmVÆue
;

37 
xLIST_ITEM
 * 
c⁄figLIST_VOLATILE
 
pxNext
;

38 
xLIST_ITEM
 * 
c⁄figLIST_VOLATILE
 
pxPªvious
;

40 
xMINI_LIST_ITEM
 
	tMöiLi°Iãm_t
;

45 
	sxLIST


47 vﬁ©ûê
UBa£Ty≥_t
 
uxNumbîOfIãms
;

48 
Li°Iãm_t
 * 
c⁄figLIST_VOLATILE
 
pxIndex
;

49 
MöiLi°Iãm_t
 
xLi°End
;

50 } 
	tLi°_t
;

53 
	#li°SET_LIST_ITEM_OWNER
–
pxLi°Iãm
, 
pxOw√r
 ) ( (ÖxLi°Iãm )->
pvOw√r
 = ( * ) (ÖxOw√∏Ë)

	)

55 
	#li°GET_LIST_ITEM_OWNER
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
pvOw√r
 )

	)

57 
	#li°SET_LIST_ITEM_VALUE
–
pxLi°Iãm
, 
xVÆue
 ) ( (ÖxLi°Iãm )->
xIãmVÆue
 = ( xVÆuêË)

	)

59 
	#li°GET_LIST_ITEM_VALUE
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
xIãmVÆue
 )

	)

61 
	#li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–
pxLi°
 ) ( ( (ÖxLi° )->
xLi°End
 ).
pxNext
->
xIãmVÆue
 )

	)

63 
	#li°GET_HEAD_ENTRY
–
pxLi°
 ) ( ( (ÖxLi° )->
xLi°End
 ).
pxNext
 )

	)

65 
	#li°GET_NEXT
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
pxNext
 )

	)

67 
	#li°GET_END_MARKER
–
pxLi°
 ) ( ( 
Li°Iãm_t
 c⁄° * ) ( &––pxLi° )->
xLi°End
 ) ) )

	)

69 
	#li°LIST_IS_EMPTY
–
pxLi°
 ) ( ( (ÖxLi° )->
uxNumbîOfIãms
 =–
UBa£Ty≥_t
 ) 0 ) ? 
pdTRUE
 : 
pdFALSE
 )

	)

71 
	#li°CURRENT_LIST_LENGTH
–
pxLi°
 ) ( (ÖxLi° )->
uxNumbîOfIãms
 )

	)

73 
	#li°GET_OWNER_OF_NEXT_ENTRY
–
pxTCB
, 
pxLi°
 ) \

75 
Li°_t
 * c⁄° 
pxC⁄°Li°
 = ( 
pxLi°
 ); \

78 –
pxC⁄°Li°
 )->
pxIndex
 = (ÖxC⁄°Li° )->pxIndex->
pxNext
; \

79 if––* ) ( 
pxC⁄°Li°
 )->
pxIndex
 =–* ) &––pxC⁄°Li° )->
xLi°End
 ) ) \

81 –
pxC⁄°Li°
 )->
pxIndex
 = (ÖxC⁄°Li° )->pxIndex->
pxNext
; \

83 –
pxTCB
 ) = ( 
pxC⁄°Li°
 )->
pxIndex
->
pvOw√r
; \

84 }

	)

87 
	#li°GET_OWNER_OF_HEAD_ENTRY
–
pxLi°
 ) ( ( &––pxLi° )->
xLi°End
 ) )->
pxNext
->
pvOw√r
 )

	)

89 
	#li°IS_CONTAINED_WITHIN
–
pxLi°
, 
pxLi°Iãm
 ) ( ( (ÖxLi°Iãm )->
pxC⁄èöî
 =–pxLi° ) ) ? ( 
pdTRUE
 ) : ( 
pdFALSE
 ) )

	)

91 
	#li°LIST_ITEM_CONTAINER
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
pxC⁄èöî
 )

	)

93 
	#li°LIST_IS_INITIALISED
–
pxLi°
 ) ( (ÖxLi° )->
xLi°End
.
xIãmVÆue
 =
p‹tMAX_DELAY
 )

	)

95 
vLi°Inôüli£
–
Li°_t
 * c⁄° 
pxLi°
 ) 
PRIVILEGED_FUNCTION
;

97 
vLi°Inôüli£Iãm
–
Li°Iãm_t
 * c⁄° 
pxIãm
 ) 
PRIVILEGED_FUNCTION
;

100 
vLi°In£π
–
Li°_t
 * c⁄° 
pxLi°
,

101 
Li°Iãm_t
 * c⁄° 
pxNewLi°Iãm
 ) 
PRIVILEGED_FUNCTION
;

103 
vLi°In£πEnd
–
Li°_t
 * c⁄° 
pxLi°
,

104 
Li°Iãm_t
 * c⁄° 
pxNewLi°Iãm
 ) 
PRIVILEGED_FUNCTION
;

106 
UBa£Ty≥_t
 
uxLi°Remove
–
Li°Iãm_t
 * c⁄° 
pxIãmToRemove
 ) 
PRIVILEGED_FUNCTION
;

108 #ifde‡
__˝lu•lus


	@Common/include/queue.h

1 #i‚de‡
QUEUE_H


2 
	#QUEUE_H


	)

4 
	#queueYIELD_IF_USING_PREEMPTION
(Ë
	`p‹tYIELD_WITHIN_API
()

	)

5 
	gQueueDeföôi⁄
;

6 
QueueDeföôi⁄
 * 
	tQueueH™dÀ_t
;

8 
QueueDeföôi⁄
 * 
	tQueueSëH™dÀ_t
;

10 
QueueDeföôi⁄
 * 
	tQueueSëMembîH™dÀ_t
;

13 
	#queueSEND_TO_BACK
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

14 
	#queueSEND_TO_FRONT
 ( ( 
Ba£Ty≥_t
 ) 1 )

	)

15 
	#queueOVERWRITE
 ( ( 
Ba£Ty≥_t
 ) 2 )

	)

18 
	#queueQUEUE_TYPE_BASE
 ( ( 
uöt8_t
 ) 0U )

	)

19 
	#queueQUEUE_TYPE_SET
 ( ( 
uöt8_t
 ) 0U )

	)

20 
	#queueQUEUE_TYPE_MUTEX
 ( ( 
uöt8_t
 ) 1U )

	)

21 
	#queueQUEUE_TYPE_COUNTING_SEMAPHORE
 ( ( 
uöt8_t
 ) 2U )

	)

22 
	#queueQUEUE_TYPE_BINARY_SEMAPHORE
 ( ( 
uöt8_t
 ) 3U )

	)

23 
	#queueQUEUE_TYPE_RECURSIVE_MUTEX
 ( ( 
uöt8_t
 ) 4U )

	)

25 
	#xQueueCª©e
–
uxQueueLígth
, 
uxIãmSize
 ) 
	`xQueueGíîicCª©e
––uxQueueLígth ), ( uxIãmSizê), ( 
queueQUEUE_TYPE_BASE
 ) )

	)

28 
	#xQueueSídToFr⁄t
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) \

29 
	`xQueueGíîicSíd
––
xQueue
 ), ( 
pvIãmToQueue
 ), ( 
xTicksToWaô
 ), 
queueSEND_TO_FRONT
 )

	)

32 
	#xQueueSídToBack
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) \

33 
	`xQueueGíîicSíd
––
xQueue
 ), ( 
pvIãmToQueue
 ), ( 
xTicksToWaô
 ), 
queueSEND_TO_BACK
 )

	)

36 
	#xQueueSíd
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) \

37 
	`xQueueGíîicSíd
––
xQueue
 ), ( 
pvIãmToQueue
 ), ( 
xTicksToWaô
 ), 
queueSEND_TO_BACK
 )

	)

39 
	#xQueueOvîwrôe
–
xQueue
, 
pvIãmToQueue
 ) \

40 
	`xQueueGíîicSíd
––
xQueue
 ), ( 
pvIãmToQueue
 ), 0, 
queueOVERWRITE
 )

	)

42 
Ba£Ty≥_t
 
	$xQueueGíîicSíd
–
QueueH™dÀ_t
 
xQueue
,

43 c⁄° * c⁄° 
pvIãmToQueue
,

44 
TickTy≥_t
 
xTicksToWaô
,

45 c⁄° 
Ba£Ty≥_t
 
xC›yPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

47 
Ba£Ty≥_t
 
	$xQueuePìk
–
QueueH™dÀ_t
 
xQueue
,

48 * c⁄° 
pvBuf„r
,

49 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

51 
Ba£Ty≥_t
 
	$xQueuePìkFromISR
–
QueueH™dÀ_t
 
xQueue
,

52 * c⁄° 
pvBuf„r
 ) 
PRIVILEGED_FUNCTION
;

54 
Ba£Ty≥_t
 
	$xQueueRe˚ive
–
QueueH™dÀ_t
 
xQueue
,

55 * c⁄° 
pvBuf„r
,

56 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

58 
UBa£Ty≥_t
 
	$uxQueueMesßgesWaôög
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

60 
	$vQueueDñëe
–
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

63 
	#xQueueSídToFr⁄tFromISR
–
xQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) \

64 
	`xQueueGíîicSídFromISR
––
xQueue
 ), ( 
pvIãmToQueue
 ), ( 
pxHighîPri‹ôyTaskWokí
 ), 
queueSEND_TO_FRONT
 )

	)

66 
	#xQueueSídToBackFromISR
–
xQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) \

67 
	`xQueueGíîicSídFromISR
––
xQueue
 ), ( 
pvIãmToQueue
 ), ( 
pxHighîPri‹ôyTaskWokí
 ), 
queueSEND_TO_BACK
 )

	)

69 
	#xQueueSídFromISR
–
xQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) \

70 
	`xQueueGíîicSídFromISR
––
xQueue
 ), ( 
pvIãmToQueue
 ), ( 
pxHighîPri‹ôyTaskWokí
 ), 
queueSEND_TO_BACK
 )

	)

72 
Ba£Ty≥_t
 
	$xQueueGíîicSídFromISR
–
QueueH™dÀ_t
 
xQueue
,

73 c⁄° * c⁄° 
pvIãmToQueue
,

74 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
,

75 c⁄° 
Ba£Ty≥_t
 
xC›yPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

76 
Ba£Ty≥_t
 
	$xQueueGiveFromISR
–
QueueH™dÀ_t
 
xQueue
,

77 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

80 
	$vQueueAddToRegi°ry
–
QueueH™dÀ_t
 
xQueue
,

81 c⁄° * 
pcQueueName
 ) 
PRIVILEGED_FUNCTION
;

84 
QueueH™dÀ_t
 
	$xQueueGíîicCª©e
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
,

85 c⁄° 
UBa£Ty≥_t
 
uxIãmSize
,

86 c⁄° 
uöt8_t
 
ucQueueTy≥
 ) 
PRIVILEGED_FUNCTION
;

	@Common/src/list.c

1 
	~<li°.h
>

2 
	~<comm⁄.h
>

4 
	$vLi°Inôüli£
–
Li°_t
 * c⁄° 
pxLi°
 )

9 
pxLi°
->
pxIndex
 = ( 
Li°Iãm_t
 * ) &–pxLi°->
xLi°End
 );

13 
pxLi°
->
xLi°End
.
xIãmVÆue
 = 
p‹tMAX_DELAY
;

17 
pxLi°
->
xLi°End
.
pxNext
 = ( 
Li°Iãm_t
 * ) &(ÖxList->xListEnd );

18 
pxLi°
->
xLi°End
.
pxPªvious
 = ( 
Li°Iãm_t
 * ) &(ÖxList->xListEnd );

20 
pxLi°
->
uxNumbîOfIãms
 = ( 
UBa£Ty≥_t
 ) 0U;

24 
	}
}

29 
	$vLi°Inôüli£Iãm
–
Li°Iãm_t
 * c⁄° 
pxIãm
 )

32 
pxIãm
->
pxC⁄èöî
 = 
NULL
;

36 
	}
}

39 
	$vLi°In£πEnd
–
Li°_t
 * c⁄° 
pxLi°
,

40 
Li°Iãm_t
 * c⁄° 
pxNewLi°Iãm
 )

42 
Li°Iãm_t
 * c⁄° 
pxIndex
 = 
pxLi°
->pxIndex;

48 
pxNewLi°Iãm
->
pxNext
 = 
pxIndex
;

49 
pxNewLi°Iãm
->
pxPªvious
 = 
pxIndex
->pxPrevious;

52 
pxIndex
->
pxPªvious
->
pxNext
 = 
pxNewLi°Iãm
;

53 
pxIndex
->
pxPªvious
 = 
pxNewLi°Iãm
;

56 
pxNewLi°Iãm
->
pxC⁄èöî
 = 
pxLi°
;

58 –
pxLi°
->
uxNumbîOfIãms
 )++;

59 
	}
}

61 
	$vLi°In£π
–
Li°_t
 * c⁄° 
pxLi°
,

62 
Li°Iãm_t
 * c⁄° 
pxNewLi°Iãm
 )

64 
Li°Iãm_t
 * 
pxIãøt‹
;

65 c⁄° 
TickTy≥_t
 
xVÆueOfIn£πi⁄
 = 
pxNewLi°Iãm
->
xIãmVÆue
;

76 if–
xVÆueOfIn£πi⁄
 =
p‹tMAX_DELAY
 )

78 
pxIãøt‹
 = 
pxLi°
->
xLi°End
.
pxPªvious
;

82  
pxIãøt‹
 = ( 
Li°Iãm_t
 * ) &–
pxLi°
->
xLi°End
 );ÖxIãøt‹->
pxNext
->
xIãmVÆue
 <
xVÆueOfIn£πi⁄
;ÖxIterator =ÖxIterator->pxNext )

89 
pxNewLi°Iãm
->
pxNext
 = 
pxIãøt‹
->pxNext;

90 
pxNewLi°Iãm
->
pxNext
->
pxPªvious
 =ÖxNewListItem;

91 
pxNewLi°Iãm
->
pxPªvious
 = 
pxIãøt‹
;

92 
pxIãøt‹
->
pxNext
 = 
pxNewLi°Iãm
;

94 
pxNewLi°Iãm
->
pxC⁄èöî
 = 
pxLi°
;

96 –
pxLi°
->
uxNumbîOfIãms
 )++;

98 
	}
}

102 
UBa£Ty≥_t
 
	$uxLi°Remove
–
Li°Iãm_t
 * c⁄° 
pxIãmToRemove
 )

106 
Li°_t
 * c⁄° 
pxLi°
 = 
pxIãmToRemove
->
pxC⁄èöî
;

108 
pxIãmToRemove
->
pxNext
->
pxPªvious
 =ÖxItemToRemove->pxPrevious;

109 
pxIãmToRemove
->
pxPªvious
->
pxNext
 =ÖxItemToRemove->pxNext;

114 if–
pxLi°
->
pxIndex
 =
pxIãmToRemove
 )

116 
pxLi°
->
pxIndex
 = 
pxIãmToRemove
->
pxPªvious
;

120 
pxIãmToRemove
->
pxC⁄èöî
 = 
NULL
;

121 –
pxLi°
->
uxNumbîOfIãms
 )--;

123  
pxLi°
->
uxNumbîOfIãms
;

124 
	}
}

	@Common/src/queue.c

1 
	~<queue.h
>

2 
	~<comm⁄.h
>

3 
	sQueuePoöãrs


5 
öt8_t
 * 
	mpcTaû
;

6 
öt8_t
 * 
	mpcRódFrom
;

7 } 
	tQueuePoöãrs_t
;

9 
	sSem≠h‹eD©a


11 
TaskH™dÀ_t
 
	mxMuãxHﬁdî
;

12 
UBa£Ty≥_t
 
	muxRecursiveCÆlCou¡
;

13 } 
	tSem≠h‹eD©a_t
;

16 
	sQueueDeföôi⁄


18 
öt8_t
 * 
	mpcHód
;

19 
öt8_t
 * 
	mpcWrôeTo
;

23 
QueuePoöãrs_t
 
	mxQueue
;

24 
Sem≠h‹eD©a_t
 
	mxSem≠h‹e
;

25 } 
	mu
;

27 
Li°_t
 
	mxTasksWaôögToSíd
;

28 
Li°_t
 
	mxTasksWaôögToRe˚ive
;

30 vﬁ©ûê
UBa£Ty≥_t
 
	muxMesßgesWaôög
;

31 
UBa£Ty≥_t
 
	muxLígth
;

32 
UBa£Ty≥_t
 
	muxIãmSize
;

34 vﬁ©ûê
öt8_t
 
	mcRxLock
;

35 vﬁ©ûê
öt8_t
 
	mcTxLock
;

37 #i‡––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

38 
uöt8_t
 
	mucSètiˇŒyAŒoˇãd
;

41 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

42 
QueueDeföôi⁄
 * 
	mpxQueueSëC⁄èöî
;

45 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

46 
UBa£Ty≥_t
 
	muxQueueNumbî
;

47 
uöt8_t
 
	mucQueueTy≥
;

49 } 
	txQUEUE
;

51 
	#queueYIELD_IF_USING_PREEMPTION
(Ë
	`p‹tYIELD_WITHIN_API
()

	)

56 
xQUEUE
 
	tQueue_t
;

58 
¥vC›yD©aFromQueue
–
Queue_t
 * c⁄° 
pxQueue
,* c⁄° 
pvBuf„r
 );

59 
Ba£Ty≥_t
 
¥vC›yD©aToQueue
–
Queue_t
 * c⁄° 
pxQueue
,c⁄° * 
pvIãmToQueue
,c⁄° Ba£Ty≥_à
xPosôi⁄
 );

60 
¥vInôüli£NewQueue
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
,c⁄° UBa£Ty≥_à
uxIãmSize
,
uöt8_t
 * 
pucQueueSt‹age
,c⁄° uöt8_à
ucQueueTy≥
,
Queue_t
 * 
pxNewQueue
 );

61 
Ba£Ty≥_t
 
¥vIsQueueEm±y
–c⁄° 
Queue_t
 * 
pxQueue
 );

62 
Ba£Ty≥_t
 
¥vIsQueueFuŒ
–c⁄° 
Queue_t
 * 
pxQueue
 );

63 
QueueH™dÀ_t
 
xQueueGíîicCª©e
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
,c⁄° UBa£Ty≥_à
uxIãmSize
,c⁄° 
uöt8_t
 
ucQueueTy≥
 );

64 
Ba£Ty≥_t
 
xQueueGíîicRe£t
–
QueueH™dÀ_t
 
xQueue
,Ba£Ty≥_à
xNewQueue
 );

65 
Ba£Ty≥_t
 
xQueueGíîicSíd
–
QueueH™dÀ_t
 
xQueue
,c⁄° * c⁄° 
pvIãmToQueue
,
TickTy≥_t
 
xTicksToWaô
,c⁄° Ba£Ty≥_à
xC›yPosôi⁄
 );

66 
Ba£Ty≥_t
 
xQueueRe˚ive
–
QueueH™dÀ_t
 
xQueue
,* c⁄° 
pvBuf„r
,
TickTy≥_t
 
xTicksToWaô
 );

68 
Ba£Ty≥_t
 
	$xQueueGíîicRe£t
–
QueueH™dÀ_t
 
xQueue
,

69 
Ba£Ty≥_t
 
xNewQueue
 )

71 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

74 
	`èskENTER_CRITICAL
();

76 
pxQueue
->
u
.
xQueue
.
pcTaû
 =ÖxQueue->
pcHód
 + (ÖxQueue->
uxLígth
 *ÖxQueue->
uxIãmSize
 );

77 
pxQueue
->
uxMesßgesWaôög
 = ( 
UBa£Ty≥_t
 ) 0U;

78 
pxQueue
->
pcWrôeTo
 =ÖxQueue->
pcHód
;

79 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 =ÖxQueue->
pcHód
 + ( (ÖxQueue->
uxLígth
 - 1U ) *ÖxQueue->
uxIãmSize
 );

80 
pxQueue
->
cRxLock
 = 
queueUNLOCKED
;

81 
pxQueue
->
cTxLock
 = 
queueUNLOCKED
;

83 if–
xNewQueue
 =
pdFALSE
 )

90 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

92 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

94 
	`queueYIELD_IF_USING_PREEMPTION
();

102 
	`vLi°Inôüli£
–&–
pxQueue
->
xTasksWaôögToSíd
 ) );

103 
	`vLi°Inôüli£
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) );

109  
pdPASS
;

110 
	}
}

112 
	$¥vInôüli£NewQueue
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
,

113 c⁄° 
UBa£Ty≥_t
 
uxIãmSize
,

114 
uöt8_t
 * 
pucQueueSt‹age
,

115 c⁄° 
uöt8_t
 
ucQueueTy≥
,

116 
Queue_t
 * 
pxNewQueue
 )

120 –Ë
ucQueueTy≥
;

122 if–
uxIãmSize
 =–
UBa£Ty≥_t
 ) 0 )

128 
pxNewQueue
->
pcHód
 = ( 
öt8_t
 * )ÖxNewQueue;

133 
pxNewQueue
->
pcHód
 = ( 
öt8_t
 * ) 
pucQueueSt‹age
;

138 
pxNewQueue
->
uxLígth
 = 
uxQueueLígth
;

139 
pxNewQueue
->
uxIãmSize
 = uxItemSize;

140 –Ë
	`xQueueGíîicRe£t
–
pxNewQueue
, 
pdTRUE
 );

142 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

144 
pxNewQueue
->
ucQueueTy≥
 = ucQueueType;

148 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

150 
pxNewQueue
->
pxQueueSëC⁄èöî
 = 
NULL
;

154 
	}
}

156 
QueueH™dÀ_t
 
	$xQueueGíîicCª©e
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
,

157 c⁄° 
UBa£Ty≥_t
 
uxIãmSize
,

158 c⁄° 
uöt8_t
 
ucQueueTy≥
 )

160 
Queue_t
 * 
pxNewQueue
;

161 
size_t
 
xQueueSizeInByãs
;

162 
uöt8_t
 * 
pucQueueSt‹age
;

168 
xQueueSizeInByãs
 = ( 
size_t
 ) ( 
uxQueueLígth
 * 
uxIãmSize
 );

180 
pxNewQueue
 = ( 
Queue_t
 * ) 
	`pvP‹tMÆloc
––Queue_àË+ 
xQueueSizeInByãs
 );

182 if–
pxNewQueue
 !
NULL
 )

186 
pucQueueSt‹age
 = ( 
uöt8_t
 * ) 
pxNewQueue
;

187 
pucQueueSt‹age
 +–
Queue_t
 );

189 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

194 
pxNewQueue
->
ucSètiˇŒyAŒoˇãd
 = 
pdFALSE
;

198 
	`¥vInôüli£NewQueue
–
uxQueueLígth
, 
uxIãmSize
, 
pucQueueSt‹age
, 
ucQueueTy≥
, 
pxNewQueue
 );

201  
pxNewQueue
;

202 
	}
}

204 
Ba£Ty≥_t
 
	$xQueueGíîicSíd
–
QueueH™dÀ_t
 
xQueue
,

205 c⁄° * c⁄° 
pvIãmToQueue
,

206 
TickTy≥_t
 
xTicksToWaô
,

207 c⁄° 
Ba£Ty≥_t
 
xC›yPosôi⁄
 )

209 
Ba£Ty≥_t
 
xE¡ryTimeSë
 = 
pdFALSE
, 
xYõldRequúed
;

210 
TimeOut_t
 
xTimeOut
;

211 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

219 
	`èskENTER_CRITICAL
();

225 if––
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 ) || ( 
xC›yPosôi⁄
 =
queueOVERWRITE
 ) )

228 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

230 c⁄° 
UBa£Ty≥_t
 
uxPªviousMesßgesWaôög
 = 
pxQueue
->
uxMesßgesWaôög
;

232 
xYõldRequúed
 = 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
xC›yPosôi⁄
 );

234 if–
pxQueue
->
pxQueueSëC⁄èöî
 !
NULL
 )

236 if––
xC›yPosôi⁄
 =
queueOVERWRITE
 ) && ( 
uxPªviousMesßgesWaôög
 !–
UBa£Ty≥_t
 ) 0 ) )

242 if–
	`¥vNŸifyQueueSëC⁄èöî
–
pxQueue
 ) !
pdFALSE
 )

247 
	`queueYIELD_IF_USING_PREEMPTION
();

254 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

256 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

262 
	`queueYIELD_IF_USING_PREEMPTION
();

265 if–
xYõldRequúed
 !
pdFALSE
 )

271 
	`queueYIELD_IF_USING_PREEMPTION
();

277 
xYõldRequúed
 = 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
xC›yPosôi⁄
 );

281 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

283 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

289 
	`queueYIELD_IF_USING_PREEMPTION
();

292 if–
xYõldRequúed
 !
pdFALSE
 )

298 
	`queueYIELD_IF_USING_PREEMPTION
();

303 
	`èskEXIT_CRITICAL
();

304  
pdPASS
;

308 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

312 
	`èskEXIT_CRITICAL
();

316  
îrQUEUE_FULL
;

318 if–
xE¡ryTimeSë
 =
pdFALSE
 )

322 
	`vTaskI¡î«lSëTimeOutSèã
–&
xTimeOut
 );

323 
xE¡ryTimeSë
 = 
pdTRUE
;

327 
	`èskEXIT_CRITICAL
();

332 
	`vTaskSu•ídAŒ
();

333 
	`¥vLockQueue
–
pxQueue
 );

336 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

338 if–
	`¥vIsQueueFuŒ
–
pxQueue
 ) !
pdFALSE
 )

340 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ), 
xTicksToWaô
 );

347 
	`¥vU∆ockQueue
–
pxQueue
 );

354 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

356 
	`p‹tYIELD_WITHIN_API
();

362 
	`¥vU∆ockQueue
–
pxQueue
 );

363 –Ë
	`xTaskResumeAŒ
();

369 
	`¥vU∆ockQueue
–
pxQueue
 );

370 –Ë
	`xTaskResumeAŒ
();

372  
îrQUEUE_FULL
;

375 
	}
}

377 
Ba£Ty≥_t
 
	$xQueueRe˚ive
–
QueueH™dÀ_t
 
xQueue
,

378 * c⁄° 
pvBuf„r
,

379 
TickTy≥_t
 
xTicksToWaô
 )

381 
Ba£Ty≥_t
 
xE¡ryTimeSë
 = 
pdFALSE
;

382 
TimeOut_t
 
xTimeOut
;

383 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

398 
	`èskENTER_CRITICAL
();

400 c⁄° 
UBa£Ty≥_t
 
uxMesßgesWaôög
 = 
pxQueue
->uxMessagesWaiting;

404 if–
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

407 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

408 
pxQueue
->
uxMesßgesWaôög
 = uxMesßgesWaôög - ( 
UBa£Ty≥_t
 ) 1;

413 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

415 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

417 
	`queueYIELD_IF_USING_PREEMPTION
();

421 
	`mtCOVERAGE_TEST_MARKER
();

426 
	`mtCOVERAGE_TEST_MARKER
();

429 
	`èskEXIT_CRITICAL
();

430  
pdPASS
;

434 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

438 
	`èskEXIT_CRITICAL
();

439 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

440  
îrQUEUE_EMPTY
;

442 if–
xE¡ryTimeSë
 =
pdFALSE
 )

446 
	`vTaskI¡î«lSëTimeOutSèã
–&
xTimeOut
 );

447 
xE¡ryTimeSë
 = 
pdTRUE
;

452 
	`mtCOVERAGE_TEST_MARKER
();

456 
	`èskEXIT_CRITICAL
();

461 
	`vTaskSu•ídAŒ
();

462 
	`¥vLockQueue
–
pxQueue
 );

465 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

469 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

471 
	`åa˚BLOCKING_ON_QUEUE_RECEIVE
–
pxQueue
 );

472 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
 );

473 
	`¥vU∆ockQueue
–
pxQueue
 );

475 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

477 
	`p‹tYIELD_WITHIN_API
();

481 
	`mtCOVERAGE_TEST_MARKER
();

488 
	`¥vU∆ockQueue
–
pxQueue
 );

489 –Ë
	`xTaskResumeAŒ
();

496 
	`¥vU∆ockQueue
–
pxQueue
 );

497 –Ë
	`xTaskResumeAŒ
();

499 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

501 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

502  
îrQUEUE_EMPTY
;

506 
	`mtCOVERAGE_TEST_MARKER
();

510 
	}
}

513 
Ba£Ty≥_t
 
	$¥vC›yD©aToQueue
–
Queue_t
 * c⁄° 
pxQueue
,

514 c⁄° * 
pvIãmToQueue
,

515 c⁄° 
Ba£Ty≥_t
 
xPosôi⁄
 )

517 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

518 
UBa£Ty≥_t
 
uxMesßgesWaôög
;

522 
uxMesßgesWaôög
 = 
pxQueue
->uxMessagesWaiting;

524 if–
pxQueue
->
uxIãmSize
 =–
UBa£Ty≥_t
 ) 0 )

526 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

528 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

531 
xRëu∫
 = 
	`xTaskPri‹ôyDisöhîô
–
pxQueue
->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
 );

532 
pxQueue
->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
 = 
NULL
;

536 
	`mtCOVERAGE_TEST_MARKER
();

541 if–
xPosôi⁄
 =
queueSEND_TO_BACK
 )

543 –Ë
	`mem˝y
––* ) 
pxQueue
->
pcWrôeTo
, 
pvIãmToQueue
, ( 
size_t
 )ÖxQueue->
uxIãmSize
 );

544 
pxQueue
->
pcWrôeTo
 +pxQueue->
uxIãmSize
;

546 if–
pxQueue
->
pcWrôeTo
 >pxQueue->
u
.
xQueue
.
pcTaû
 )

548 
pxQueue
->
pcWrôeTo
 =ÖxQueue->
pcHód
;

552 
	`mtCOVERAGE_TEST_MARKER
();

557 –Ë
	`mem˝y
––* ) 
pxQueue
->
u
.
xQueue
.
pcRódFrom
, 
pvIãmToQueue
, ( 
size_t
 )ÖxQueue->
uxIãmSize
 );

558 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 -pxQueue->
uxIãmSize
;

560 if–
pxQueue
->
u
.
xQueue
.
pcRódFrom
 <ÖxQueue->
pcHód
 )

562 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 = (ÖxQueue->u.xQueue.
pcTaû
 -ÖxQueue->
uxIãmSize
 );

566 
	`mtCOVERAGE_TEST_MARKER
();

569 if–
xPosôi⁄
 =
queueOVERWRITE
 )

571 if–
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

577 --
uxMesßgesWaôög
;

581 
	`mtCOVERAGE_TEST_MARKER
();

586 
	`mtCOVERAGE_TEST_MARKER
();

590 
pxQueue
->
uxMesßgesWaôög
 = uxMesßgesWaôög + ( 
UBa£Ty≥_t
 ) 1;

592  
xRëu∫
;

593 
	}
}

596 
	$¥vC›yD©aFromQueue
–
Queue_t
 * c⁄° 
pxQueue
,

597 * c⁄° 
pvBuf„r
 )

599 if–
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0 )

601 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 +pxQueue->
uxIãmSize
;

603 if–
pxQueue
->
u
.
xQueue
.
pcRódFrom
 >pxQueue->u.xQueue.
pcTaû
 )

605 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 =ÖxQueue->
pcHód
;

609 
	`mtCOVERAGE_TEST_MARKER
();

612 –Ë
	`mem˝y
––* ) 
pvBuf„r
, ( * ) 
pxQueue
->
u
.
xQueue
.
pcRódFrom
, ( 
size_t
 )ÖxQueue->
uxIãmSize
 );

614 
	}
}

616 
Ba£Ty≥_t
 
	$¥vIsQueueEm±y
–c⁄° 
Queue_t
 * 
pxQueue
 )

618 
Ba£Ty≥_t
 
xRëu∫
;

620 
	`èskENTER_CRITICAL
();

622 if–
pxQueue
->
uxMesßgesWaôög
 =–
UBa£Ty≥_t
 ) 0 )

624 
xRëu∫
 = 
pdTRUE
;

628 
xRëu∫
 = 
pdFALSE
;

631 
	`èskEXIT_CRITICAL
();

633  
xRëu∫
;

634 
	}
}

637 
Ba£Ty≥_t
 
	$¥vIsQueueFuŒ
–c⁄° 
Queue_t
 * 
pxQueue
 )

639 
Ba£Ty≥_t
 
xRëu∫
;

641 
	`èskENTER_CRITICAL
();

643 if–
pxQueue
->
uxMesßgesWaôög
 =pxQueue->
uxLígth
 )

645 
xRëu∫
 = 
pdTRUE
;

649 
xRëu∫
 = 
pdFALSE
;

652 
	`èskEXIT_CRITICAL
();

654  
xRëu∫
;

655 
	}
}

	@Memory/include/heap.h

1 *
pvP‹tMÆloc
–
size_t
 
xW™ãdSize
 );

2 
vP‹tFªe
–*
pv
 );

	@Memory/src/heap.c

1 
	~<hóp2.h
>

2 
	#p‹tBYTE_ALIGNMENT
 8

	)

3 
	#c⁄figTOTAL_HEAP_SIZE
 ( ( 
size_t
 ) ( 100 * 1024 ) )

	)

4 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0007 )

	)

6 
	sA_BLOCK_LINK


8 
A_BLOCK_LINK
 *
	mpxNextFªeBlock
;

9 
size_t
 
	mxBlockSize
;

10 } 
	tBlockLök_t
;

14 
BlockLök_t
 
	gxSèπ
, 
	gxEnd
;

18 
uöt8_t
 
	gucHóp
[ 
c⁄figTOTAL_HEAP_SIZE
 ];

23 
	#c⁄figADJUSTED_HEAP_SIZE
 ( 
c⁄figTOTAL_HEAP_SIZE
 - 
p‹tBYTE_ALIGNMENT
 )

	)

25 
size_t
 
	gxFªeByãsRemaöög
 = 
c⁄figADJUSTED_HEAP_SIZE
;

36 
	#¥vIn£πBlockI¡oFªeLi°
–
pxBlockToIn£π
 ) \

38 
BlockLök_t
 *
pxIãøt‹
; \

39 
size_t
 
xBlockSize
; \

41 
xBlockSize
 = 
pxBlockToIn£π
->xBlockSize; \

45  
pxIãøt‹
 = &
xSèπ
;ÖxIãøt‹->
pxNextFªeBlock
->
xBlockSize
 < xBlockSize;ÖxIterator =ÖxIterator->pxNextFreeBlock ) \

52 
pxBlockToIn£π
->
pxNextFªeBlock
 = 
pxIãøt‹
->pxNextFreeBlock; \

53 
pxIãøt‹
->
pxNextFªeBlock
 = 
pxBlockToIn£π
; \

54 }

	)

57 c⁄° 
uöt16_t
 
	ghópSTRUCT_SIZE
 = ( (  ( 
BlockLök_t
 ) + ( 
p‹tBYTE_ALIGNMENT
 - 1 ) ) & ~
p‹tBYTE_ALIGNMENT_MASK
 );

58 
	$¥vHópInô
( )

60 
BlockLök_t
* 
pxFú°FªeBlock
;

61 
uöt8_t
 *
pucAlig√dHóp
;

62 
pucAlig√dHóp
 = (
uöt8_t
*)(((
p‹tPOINTER_SIZE_TYPE
)&
ucHóp
[
p‹tBYTE_ALIGNMENT
])&(~(’‹tPOINTER_SIZE_TYPE)
p‹tBYTE_ALIGNMENT_MASK
 ) ) );

64 
xSèπ
.
pxNextFªeBlock
 = (*)
pucAlig√dHóp
;

65 
xSèπ
.
xBlockSize
 = 0;

67 
xEnd
.
pxNextFªeBlock
 = 
NULL
;

68 
xEnd
.
xBlockSize
 = 
c⁄figADJUSTED_HEAP_SIZE
;

72 
pxFú°FªeBlock
 = ( * ) 
pucAlig√dHóp
;

73 
pxFú°FªeBlock
->
xBlockSize
 = 
c⁄figADJUSTED_HEAP_SIZE
;

74 
pxFú°FªeBlock
->
pxNextFªeBlock
 = &
xEnd
;

76 
	}
}

79 *
	$pvP‹tMÆloc
–
size_t
 
xW™ãdSize
 )

81 
BlockLök_t
 *
pxBlock
, *
pxPªviousBlock
, *
pxNewBlockLök
;

82 
boﬁ
 
xHópHasBìnInôüli£d
 = 
Ál£
;

83 *
pvRëu∫
 = 
NULL
;

85 if–
xHópHasBìnInôüli£d
 =
Ál£
)

87 
	`¥vHópInô
();

88 
xHópHasBìnInôüli£d
 = 
åue
;

93 if–
xW™ãdSize
 > 0 )

95 
xW™ãdSize
 +
hópSTRUCT_SIZE
;

98 if––
xW™ãdSize
 & 
p‹tBYTE_ALIGNMENT_MASK
 ) != 0 )

101 
xW™ãdSize
 +–
p‹tBYTE_ALIGNMENT
 - ( xW™ãdSizê& 
p‹tBYTE_ALIGNMENT_MASK
 ) );

106 if––
xW™ãdSize
 > 0 ) && ( xW™ãdSizê< 
c⁄figADJUSTED_HEAP_SIZE
 ) )

110 
pxPªviousBlock
 = &
xSèπ
;

111 
pxBlock
 = 
xSèπ
.
pxNextFªeBlock
;

112  ( 
pxBlock
->
xBlockSize
 < 
xW™ãdSize
 ) && (ÖxBlock->
pxNextFªeBlock
 !
NULL
 ) )

114 
pxPªviousBlock
 = 
pxBlock
;

115 
pxBlock
 =ÖxBlock->
pxNextFªeBlock
;

119 if–
pxBlock
 !&
xEnd
 )

123 
pvRëu∫
 = ( * ) ( ( ( 
uöt8_t
 * ) 
pxPªviousBlock
->
pxNextFªeBlock
 ) + 
hópSTRUCT_SIZE
 );

127 
pxPªviousBlock
->
pxNextFªeBlock
 = 
pxBlock
->pxNextFreeBlock;

130 if––
pxBlock
->
xBlockSize
 - 
xW™ãdSize
 ) > 
hópMINIMUM_BLOCK_SIZE
 )

135 
pxNewBlockLök
 = ( * ) ( ( ( 
uöt8_t
 * ) 
pxBlock
 ) + 
xW™ãdSize
 );

139 
pxNewBlockLök
->
xBlockSize
 = 
pxBlock
->xBlockSizê- 
xW™ãdSize
;

140 
pxBlock
->
xBlockSize
 = 
xW™ãdSize
;

143 
	`¥vIn£πBlockI¡oFªeLi°
––
pxNewBlockLök
 ) );

146 
xFªeByãsRemaöög
 -
pxBlock
->
xBlockSize
;

151  
pvRëu∫
;

153 
	}
}

154 
	$vP‹tFªe
–*
pv
 )

156 
uöt8_t
 *
puc
 = ( uöt8_à* ) 
pv
;

157 
BlockLök_t
 *
pxLök
;

158 if–
pv
 !
NULL
 )

162 
puc
 -
hópSTRUCT_SIZE
;

166 
pxLök
 = ( * ) 
puc
;

169 
	`¥vIn£πBlockI¡oFªeLi°
–––
BlockLök_t
 * ) 
pxLök
 ) );

170 
xFªeByãsRemaöög
 +
pxLök
->
xBlockSize
;

173 
	}
}

	@Softtime/include/time.h

1 
	#tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) -2 )

	)

2 
	#tmrCOMMAND_EXECUTE_CALLBACK
 ( ( 
Ba£Ty≥_t
 ) -1 )

	)

3 
	#tmrCOMMAND_START_DONT_TRACE
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

4 
	#tmrCOMMAND_START
 ( ( 
Ba£Ty≥_t
 ) 1 )

	)

5 
	#tmrCOMMAND_RESET
 ( ( 
Ba£Ty≥_t
 ) 2 )

	)

6 
	#tmrCOMMAND_STOP
 ( ( 
Ba£Ty≥_t
 ) 3 )

	)

7 
	#tmrCOMMAND_CHANGE_PERIOD
 ( ( 
Ba£Ty≥_t
 ) 4 )

	)

8 
	#tmrCOMMAND_DELETE
 ( ( 
Ba£Ty≥_t
 ) 5 )

	)

10 
	#tmrFIRST_FROM_ISR_COMMAND
 ( ( 
Ba£Ty≥_t
 ) 6 )

	)

11 
	#tmrCOMMAND_START_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 6 )

	)

12 
	#tmrCOMMAND_RESET_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 7 )

	)

13 
	#tmrCOMMAND_STOP_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 8 )

	)

14 
	#tmrCOMMAND_CHANGE_PERIOD_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 9 )

	)

16 
	gtmrTimîC⁄åﬁ
;

17 
tmrTimîC⁄åﬁ
 * 
	tTimîH™dÀ_t
;

19 (* 
	tTimîCÆlbackFun˘i⁄_t
)–
	tTimîH™dÀ_t
 
	txTimî
 );

21 (* 
	tPídedFun˘i⁄_t
)( *,

22 
	tuöt32_t
 );

24 
	#xTimîSèπ
–
xTimî
, 
xTicksToWaô
 ) \

25 
	`xTimîGíîicComm™d
––
xTimî
 ), 
tmrCOMMAND_START
, ( 
	`xTaskGëTickCou¡
(Ë), 
NULL
, ( 
xTicksToWaô
 ) )

	)

	@Softtime/src/time.c

2 
	~<time.h
>

3 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

5 
	stmrTimîC⁄åﬁ


7 c⁄° * 
	mpcTimîName
;

8 
Li°Iãm_t
 
	mxTimîLi°Iãm
;

9 
TickTy≥_t
 
	mxTimîPîiodInTicks
;

10 * 
	mpvTimîID
;

11 
TimîCÆlbackFun˘i⁄_t
 
	mpxCÆlbackFun˘i⁄
;

12 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

13 
UBa£Ty≥_t
 
	muxTimîNumbî
;

15 
uöt8_t
 
	mucSètus
;

16 } 
	txTIMER
;

18 
xTIMER
 
	tTimî_t
;

19 
	stmrTimîP¨amëîs


21 
TickTy≥_t
 
	mxMesßgeVÆue
;

22 
Timî_t
 * 
	mpxTimî
;

23 } 
	tTimîP¨amëî_t
;

26 
	stmrCÆlbackP¨amëîs


28 
PídedFun˘i⁄_t
 
	mpxCÆlbackFun˘i⁄
;

29 * 
	mpvP¨amëî1
;

30 
uöt32_t
 
	mulP¨amëî2
;

31 } 
	tCÆlbackP¨amëîs_t
;

34 
	#tmrSTATUS_IS_ACTIVE
 ( ( 
uöt8_t
 ) 0x01 )

	)

35 
	#tmrSTATUS_IS_STATICALLY_ALLOCATED
 ( ( 
uöt8_t
 ) 0x02 )

	)

36 
	#tmrSTATUS_IS_AUTORELOAD
 ( ( 
uöt8_t
 ) 0x04 )

	)

41 
	$¥vTimîTask
–*
pvP¨amëîs
 )

43 
TickTy≥_t
 
xNextExpúeTime
;

44 
Ba£Ty≥_t
 
xLi°WasEm±y
;

49 
xNextExpúeTime
 = 
	`¥vGëNextExpúeTime
–&
xLi°WasEm±y
 );

53 
	`¥vPro˚ssTimîOrBlockTask
–
xNextExpúeTime
, 
xLi°WasEm±y
 );

56 
	`¥vPro˚ssRe˚ivedComm™ds
();

58 
	}
}

63 
	$p‹tTASK_FUNCTION
–
¥vTimîTask
, 
pvP¨amëîs
 )

65 
TickTy≥_t
 
xNextExpúeTime
;

66 
Ba£Ty≥_t
 
xLi°WasEm±y
;

69 –Ë
pvP¨amëîs
;

71 #i‡–
c⁄figUSE_DAEMON_TASK_STARTUP_HOOK
 == 1 )

73 
	`vAµliˇti⁄D´m⁄TaskSèπupHook
( );

79 
	`vAµliˇti⁄D´m⁄TaskSèπupHook
();

87 
xNextExpúeTime
 = 
	`¥vGëNextExpúeTime
–&
xLi°WasEm±y
 );

91 
	`¥vPro˚ssTimîOrBlockTask
–
xNextExpúeTime
, 
xLi°WasEm±y
 );

94 
	`¥vPro˚ssRe˚ivedComm™ds
();

96 
	}
}

97 
	$¥vCheckF‹VÆidLi°AndQueue
( )

102 
	`èskENTER_CRITICAL
();

104 if–
xTimîQueue
 =
NULL
 )

106 
	`vLi°Inôüli£
–&
xA˘iveTimîLi°1
 );

107 
	`vLi°Inôüli£
–&
xA˘iveTimîLi°2
 );

108 
pxCuºítTimîLi°
 = &
xA˘iveTimîLi°1
;

109 
pxOvîÊowTimîLi°
 = &
xA˘iveTimîLi°2
;

111 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

115 
PRIVILEGED_DATA
 
SèticQueue_t
 
xSèticTimîQueue
;

116 
PRIVILEGED_DATA
 
uöt8_t
 
ucSèticTimîQueueSt‹age
[ ( 
size_t
 ) 
c⁄figTIMER_QUEUE_LENGTH
 * –
D´m⁄TaskMesßge_t
 ) ];

118 
xTimîQueue
 = 
	`xQueueCª©eSètic
––
UBa£Ty≥_t
 ) 
c⁄figTIMER_QUEUE_LENGTH
, ( UBa£Ty≥_àË–
D´m⁄TaskMesßge_t
 ), &–
ucSèticTimîQueueSt‹age
[ 0 ] ), &
xSèticTimîQueue
 );

122 
xTimîQueue
 = 
	`xQueueCª©e
––
UBa£Ty≥_t
 ) 
c⁄figTIMER_QUEUE_LENGTH
, –
D´m⁄TaskMesßge_t
 ) );

126 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

128 if–
xTimîQueue
 !
NULL
 )

130 
	`vQueueAddToRegi°ry
–
xTimîQueue
, "TmrQ" );

134 
	`mtCOVERAGE_TEST_MARKER
();

141 
	`mtCOVERAGE_TEST_MARKER
();

144 
	`èskEXIT_CRITICAL
();

145 
	}
}

148 
TickTy≥_t
 
	$¥vGëNextExpúeTime
–
Ba£Ty≥_t
 * c⁄° 
pxLi°WasEm±y
 )

150 
TickTy≥_t
 
xNextExpúeTime
;

159 *
pxLi°WasEm±y
 = 
	`li°LIST_IS_EMPTY
–
pxCuºítTimîLi°
 );

161 if–*
pxLi°WasEm±y
 =
pdFALSE
 )

163 
xNextExpúeTime
 = 
	`li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

168 
xNextExpúeTime
 = ( 
TickTy≥_t
 ) 0U;

171  
xNextExpúeTime
;

172 
	}
}

174 
	$¥vInôüli£NewTimî
–c⁄° * c⁄° 
pcTimîName
,

175 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

176 c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
,

177 * c⁄° 
pvTimîID
,

178 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
,

179 
Timî_t
 * 
pxNewTimî
 )

182 if–
pxNewTimî
 !
NULL
 )

186 
	`¥vCheckF‹VÆidLi°AndQueue
();

190 
pxNewTimî
->
pcTimîName
 =ÖcTimerName;

191 
pxNewTimî
->
xTimîPîiodInTicks
 = xTimerPeriodInTicks;

192 
pxNewTimî
->
pvTimîID
 =ÖvTimerID;

193 
pxNewTimî
->
pxCÆlbackFun˘i⁄
 =ÖxCallbackFunction;

194 
	`vLi°Inôüli£Iãm
–&–
pxNewTimî
->
xTimîLi°Iãm
 ) );

196 if–
uxAutoRñﬂd
 !
pdFALSE
 )

198 
pxNewTimî
->
ucSètus
 |
tmrSTATUS_IS_AUTORELOAD
;

202 
	}
}

204 
Ba£Ty≥_t
 
	$¥vIn£πTimîInA˘iveLi°
–
Timî_t
 * c⁄° 
pxTimî
,

205 c⁄° 
TickTy≥_t
 
xNextExpúyTime
,

206 c⁄° 
TickTy≥_t
 
xTimeNow
,

207 c⁄° 
TickTy≥_t
 
xComm™dTime
 )

209 
Ba£Ty≥_t
 
xPro˚ssTimîNow
 = 
pdFALSE
;

211 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTimî
->
xTimîLi°Iãm
 ), 
xNextExpúyTime
 );

212 
	`li°SET_LIST_ITEM_OWNER
–&–
pxTimî
->
xTimîLi°Iãm
 ),ÖxTimer );

214 if–
xNextExpúyTime
 <
xTimeNow
 )

218 if–––
TickTy≥_t
 ) ( 
xTimeNow
 - 
xComm™dTime
 ) ) >
pxTimî
->
xTimîPîiodInTicks
 )

222 
xPro˚ssTimîNow
 = 
pdTRUE
;

226 
	`vLi°In£π
–
pxOvîÊowTimîLi°
, &–
pxTimî
->
xTimîLi°Iãm
 ) );

231 if––
xTimeNow
 < 
xComm™dTime
 ) && ( 
xNextExpúyTime
 >= xCommandTime ) )

236 
xPro˚ssTimîNow
 = 
pdTRUE
;

240 
	`vLi°In£π
–
pxCuºítTimîLi°
, &–
pxTimî
->
xTimîLi°Iãm
 ) );

244  
xPro˚ssTimîNow
;

245 
	}
}

248 
	$¥vPro˚ssExpúedTimî
–c⁄° 
TickTy≥_t
 
xNextExpúeTime
,

249 c⁄° 
TickTy≥_t
 
xTimeNow
 )

251 
Ba£Ty≥_t
 
xResu…
;

252 
Timî_t
 * c⁄° 
pxTimî
 = ( Timî_à* ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

257 –Ë
	`uxLi°Remove
–&–
pxTimî
->
xTimîLi°Iãm
 ) );

258 
	`åa˚TIMER_EXPIRED
–
pxTimî
 );

262 if––
pxTimî
->
ucSètus
 & 
tmrSTATUS_IS_AUTORELOAD
 ) != 0 )

267 if–
	`¥vIn£πTimîInA˘iveLi°
–
pxTimî
, ( 
xNextExpúeTime
 +ÖxTimî->
xTimîPîiodInTicks
 ), 
xTimeNow
, xNextExpúeTimêË!
pdFALSE
 )

271 
xResu…
 = 
	`xTimîGíîicComm™d
–
pxTimî
, 
tmrCOMMAND_START_DONT_TRACE
, 
xNextExpúeTime
, 
NULL
, 
tmrNO_DELAY
 );

272 –Ë
xResu…
;

276 
	`mtCOVERAGE_TEST_MARKER
();

281 
pxTimî
->
ucSètus
 &~
tmrSTATUS_IS_ACTIVE
;

282 
	`mtCOVERAGE_TEST_MARKER
();

286 
pxTimî
->
	`pxCÆlbackFun˘i⁄
––
TimîH™dÀ_t
 )ÖxTimer );

287 
	}
}

290 
	$¥vPro˚ssRe˚ivedComm™ds
( )

292 
D´m⁄TaskMesßge_t
 
xMesßge
;

293 
Timî_t
 * 
pxTimî
;

294 
Ba£Ty≥_t
 
xTimîLi°sWîeSwôched
, 
xResu…
;

295 
TickTy≥_t
 
xTimeNow
;

297  
	`xQueueRe˚ive
–
xTimîQueue
, &
xMesßge
, 
tmrNO_DELAY
 ) !
pdFAIL
 )

299 #i‡–
INCLUDE_xTimîPídFun˘i⁄CÆl
 == 1 )

303 if–
xMesßge
.
xMesßgeID
 < ( 
Ba£Ty≥_t
 ) 0 )

305 c⁄° 
CÆlbackP¨amëîs_t
 * c⁄° 
pxCÆlback
 = &–
xMesßge
.
u
.
xCÆlbackP¨amëîs
 );

311 
pxCÆlback
->
	`pxCÆlbackFun˘i⁄
–pxCÆlback->
pvP¨amëî1
,ÖxCÆlback->
ulP¨amëî2
 );

315 
	`mtCOVERAGE_TEST_MARKER
();

322 if–
xMesßge
.
xMesßgeID
 >–
Ba£Ty≥_t
 ) 0 )

326 
pxTimî
 = 
xMesßge
.
u
.
xTimîP¨amëîs
.pxTimer;

328 if–
	`li°IS_CONTAINED_WITHIN
–
NULL
, &–
pxTimî
->
xTimîLi°Iãm
 ) ) =
pdFALSE
 )

331 –Ë
	`uxLi°Remove
–&–
pxTimî
->
xTimîLi°Iãm
 ) );

335 
	`mtCOVERAGE_TEST_MARKER
();

338 
	`åa˚TIMER_COMMAND_RECEIVED
–
pxTimî
, 
xMesßge
.
xMesßgeID
, xMesßge.
u
.
xTimîP¨amëîs
.
xMesßgeVÆue
 );

346 
xTimeNow
 = 
	`¥vSam∂eTimeNow
–&
xTimîLi°sWîeSwôched
 );

348  
xMesßge
.
xMesßgeID
 )

350 
tmrCOMMAND_START
:

351 
tmrCOMMAND_START_FROM_ISR
:

352 
tmrCOMMAND_RESET
:

353 
tmrCOMMAND_RESET_FROM_ISR
:

354 
tmrCOMMAND_START_DONT_TRACE
:

356 
pxTimî
->
ucSètus
 |
tmrSTATUS_IS_ACTIVE
;

358 if–
	`¥vIn£πTimîInA˘iveLi°
–
pxTimî
, 
xMesßge
.
u
.
xTimîP¨amëîs
.
xMesßgeVÆue
 +ÖxTimî->
xTimîPîiodInTicks
, 
xTimeNow
, xMesßge.u.xTimîP¨amëîs.xMesßgeVÆuêË!
pdFALSE
 )

362 
pxTimî
->
	`pxCÆlbackFun˘i⁄
––
TimîH™dÀ_t
 )ÖxTimer );

363 
	`åa˚TIMER_EXPIRED
–
pxTimî
 );

365 if––
pxTimî
->
ucSètus
 & 
tmrSTATUS_IS_AUTORELOAD
 ) != 0 )

367 
xResu…
 = 
	`xTimîGíîicComm™d
–
pxTimî
, 
tmrCOMMAND_START_DONT_TRACE
, 
xMesßge
.
u
.
xTimîP¨amëîs
.
xMesßgeVÆue
 +ÖxTimî->
xTimîPîiodInTicks
, 
NULL
, 
tmrNO_DELAY
 );

368 –Ë
xResu…
;

372 
	`mtCOVERAGE_TEST_MARKER
();

377 
	`mtCOVERAGE_TEST_MARKER
();

382 
tmrCOMMAND_STOP
:

383 
tmrCOMMAND_STOP_FROM_ISR
:

385 
pxTimî
->
ucSètus
 &~
tmrSTATUS_IS_ACTIVE
;

388 
tmrCOMMAND_CHANGE_PERIOD
:

389 
tmrCOMMAND_CHANGE_PERIOD_FROM_ISR
:

390 
pxTimî
->
ucSètus
 |
tmrSTATUS_IS_ACTIVE
;

391 
pxTimî
->
xTimîPîiodInTicks
 = 
xMesßge
.
u
.
xTimîP¨amëîs
.
xMesßgeVÆue
;

399 –Ë
	`¥vIn£πTimîInA˘iveLi°
–
pxTimî
, ( 
xTimeNow
 +ÖxTimî->
xTimîPîiodInTicks
 ), xTimeNow, xTimeNow );

402 
tmrCOMMAND_DELETE
:

403 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

408 if––
pxTimî
->
ucSètus
 & 
tmrSTATUS_IS_STATICALLY_ALLOCATED
 ) =–
uöt8_t
 ) 0 )

410 
	`vP‹tFªe
–
pxTimî
 );

414 
pxTimî
->
ucSètus
 &~
tmrSTATUS_IS_ACTIVE
;

423 
pxTimî
->
ucSètus
 &~
tmrSTATUS_IS_ACTIVE
;

434 
	}
}

437 
	$¥vPro˚ssTimîOrBlockTask
–c⁄° 
TickTy≥_t
 
xNextExpúeTime
,

438 
Ba£Ty≥_t
 
xLi°WasEm±y
 )

440 
TickTy≥_t
 
xTimeNow
;

441 
Ba£Ty≥_t
 
xTimîLi°sWîeSwôched
;

443 
	`vTaskSu•ídAŒ
();

450 
xTimeNow
 = 
	`¥vSam∂eTimeNow
–&
xTimîLi°sWîeSwôched
 );

452 if–
xTimîLi°sWîeSwôched
 =
pdFALSE
 )

455 if––
xLi°WasEm±y
 =
pdFALSE
 ) && ( 
xNextExpúeTime
 <
xTimeNow
 ) )

457 –Ë
	`xTaskResumeAŒ
();

458 
	`¥vPro˚ssExpúedTimî
–
xNextExpúeTime
, 
xTimeNow
 );

468 if–
xLi°WasEm±y
 !
pdFALSE
 )

472 
xLi°WasEm±y
 = 
	`li°LIST_IS_EMPTY
–
pxOvîÊowTimîLi°
 );

475 
	`vQueueWaôF‹MesßgeRe°ri˘ed
–
xTimîQueue
, ( 
xNextExpúeTime
 - 
xTimeNow
 ), 
xLi°WasEm±y
 );

477 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

483 
	`p‹tYIELD_WITHIN_API
();

489 –Ë
	`xTaskResumeAŒ
();

492 
	}
}

494 
TickTy≥_t
 
	$¥vSam∂eTimeNow
–
Ba£Ty≥_t
 * c⁄° 
pxTimîLi°sWîeSwôched
 )

496 
TickTy≥_t
 
xTimeNow
;

497 
PRIVILEGED_DATA
 
TickTy≥_t
 
xLa°Time
 = ( TickType_t ) 0U;

499 
xTimeNow
 = 
	`xTaskGëTickCou¡
();

501 if–
xTimeNow
 < 
xLa°Time
 )

503 
	`¥vSwôchTimîLi°s
();

504 *
pxTimîLi°sWîeSwôched
 = 
pdTRUE
;

508 *
pxTimîLi°sWîeSwôched
 = 
pdFALSE
;

511 
xLa°Time
 = 
xTimeNow
;

513  
xTimeNow
;

514 
	}
}

516 
	$¥vSwôchTimîLi°s
( )

518 
TickTy≥_t
 
xNextExpúeTime
, 
xRñﬂdTime
;

519 
Li°_t
 * 
pxTemp
;

520 
Timî_t
 * 
pxTimî
;

521 
Ba£Ty≥_t
 
xResu…
;

527  
	`li°LIST_IS_EMPTY
–
pxCuºítTimîLi°
 ) =
pdFALSE
 )

529 
xNextExpúeTime
 = 
	`li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

532 
pxTimî
 = ( 
Timî_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

533 –Ë
	`uxLi°Remove
–&–
pxTimî
->
xTimîLi°Iãm
 ) );

538 
pxTimî
->
	`pxCÆlbackFun˘i⁄
––
TimîH™dÀ_t
 )ÖxTimer );

540 if––
pxTimî
->
ucSètus
 & 
tmrSTATUS_IS_AUTORELOAD
 ) != 0 )

548 
xRñﬂdTime
 = ( 
xNextExpúeTime
 + 
pxTimî
->
xTimîPîiodInTicks
 );

550 if–
xRñﬂdTime
 > 
xNextExpúeTime
 )

552 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTimî
->
xTimîLi°Iãm
 ), 
xRñﬂdTime
 );

553 
	`li°SET_LIST_ITEM_OWNER
–&–
pxTimî
->
xTimîLi°Iãm
 ),ÖxTimer );

554 
	`vLi°In£π
–
pxCuºítTimîLi°
, &–
pxTimî
->
xTimîLi°Iãm
 ) );

558 
xResu…
 = 
	`xTimîGíîicComm™d
–
pxTimî
, 
tmrCOMMAND_START_DONT_TRACE
, 
xNextExpúeTime
, 
NULL
, 
tmrNO_DELAY
 );

559 –Ë
xResu…
;

564 
pxTemp
 = 
pxCuºítTimîLi°
;

565 
pxCuºítTimîLi°
 = 
pxOvîÊowTimîLi°
;

566 
pxOvîÊowTimîLi°
 = 
pxTemp
;

567 
	}
}

569 
TimîH™dÀ_t
 
	$xTimîCª©e
–c⁄° * c⁄° 
pcTimîName
,

570 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

571 c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
,

572 * c⁄° 
pvTimîID
,

573 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
 )

575 
Timî_t
 * 
pxNewTimî
;

577 
pxNewTimî
 = ( 
Timî_t
 * ) 
	`pvP‹tMÆloc
( ( Timer_t ) );

579 if–
pxNewTimî
 !
NULL
 )

584 
pxNewTimî
->
ucSètus
 = 0x00;

585 
	`¥vInôüli£NewTimî
–
pcTimîName
, 
xTimîPîiodInTicks
, 
uxAutoRñﬂd
, 
pvTimîID
, 
pxCÆlbackFun˘i⁄
, 
pxNewTimî
 );

588  
pxNewTimî
;

589 
	}
}

591 
Ba£Ty≥_t
 
	$xTimîCª©eTimîTask
( )

593 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFAIL
;

599 
	`¥vCheckF‹VÆidLi°AndQueue
();

601 if–
xTimîQueue
 !
NULL
 )

603 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

605 
SèticTask_t
 * 
pxTimîTaskTCBBuf„r
 = 
NULL
;

606 
SèckTy≥_t
 * 
pxTimîTaskSèckBuf„r
 = 
NULL
;

607 
uöt32_t
 
ulTimîTaskSèckSize
;

609 
	`vAµliˇti⁄GëTimîTaskMem‹y
–&
pxTimîTaskTCBBuf„r
, &
pxTimîTaskSèckBuf„r
, &
ulTimîTaskSèckSize
 );

610 
xTimîTaskH™dÀ
 = 
	`xTaskCª©eSètic
–
¥vTimîTask
,

611 
c⁄figTIMER_SERVICE_TASK_NAME
,

612 
ulTimîTaskSèckSize
,

613 
NULL
,

614 ––
UBa£Ty≥_t
 ) 
c⁄figTIMER_TASK_PRIORITY
 ) | 
p‹tPRIVILEGE_BIT
,

615 
pxTimîTaskSèckBuf„r
,

616 
pxTimîTaskTCBBuf„r
 );

618 if–
xTimîTaskH™dÀ
 !
NULL
 )

620 
xRëu∫
 = 
pdPASS
;

625 
xRëu∫
 = 
	`xTaskCª©e
–
¥vTimîTask
,

626 
c⁄figTIMER_SERVICE_TASK_NAME
,

627 
c⁄figTIMER_TASK_STACK_DEPTH
,

628 
NULL
,

629 ––
UBa£Ty≥_t
 ) 
c⁄figTIMER_TASK_PRIORITY
 ) | 
p‹tPRIVILEGE_BIT
,

630 &
xTimîTaskH™dÀ
 );

636 
	`mtCOVERAGE_TEST_MARKER
();

639  
xRëu∫
;

640 
	}
}

641 
Ba£Ty≥_t
 
	$xTimîGíîicComm™d
–
TimîH™dÀ_t
 
xTimî
,

642 c⁄° 
Ba£Ty≥_t
 
xComm™dID
,

643 c⁄° 
TickTy≥_t
 
xO±i⁄ÆVÆue
,

644 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
,

645 c⁄° 
TickTy≥_t
 
xTicksToWaô
 )

647 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFAIL
;

648 
D´m⁄TaskMesßge_t
 
xMesßge
;

653 if–
xTimîQueue
 !
NULL
 )

656 
xMesßge
.
xMesßgeID
 = 
xComm™dID
;

657 
xMesßge
.
u
.
xTimîP¨amëîs
.
xMesßgeVÆue
 = 
xO±i⁄ÆVÆue
;

658 
xMesßge
.
u
.
xTimîP¨amëîs
.
pxTimî
 = 
xTimî
;

660 if–
xComm™dID
 < 
tmrFIRST_FROM_ISR_COMMAND
 )

662 if–
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_RUNNING
 )

664 
xRëu∫
 = 
	`xQueueSídToBack
–
xTimîQueue
, &
xMesßge
, 
xTicksToWaô
 );

668 
xRëu∫
 = 
	`xQueueSídToBack
–
xTimîQueue
, &
xMesßge
, 
tmrNO_DELAY
 );

673 
xRëu∫
 = 
	`xQueueSídToBackFromISR
–
xTimîQueue
, &
xMesßge
, 
pxHighîPri‹ôyTaskWokí
 );

678  
xRëu∫
;

679 
	}
}

681 
TickTy≥_t
 
	$xTimîGëExpúyTime
–
TimîH™dÀ_t
 
xTimî
 )

683 
Timî_t
 * 
pxTimî
 = 
xTimî
;

684 
TickTy≥_t
 
xRëu∫
;

686 
xRëu∫
 = 
	`li°GET_LIST_ITEM_VALUE
–&–
pxTimî
->
xTimîLi°Iãm
 ) );

687  
xRëu∫
;

688 
	}
}

691 
	$¥vSëNextTimîI¡îru±
()

693 
__asm
 vﬁ©ûe("ldÅ0,0(%0)"::"r"
mtimecmp
);

694 
__asm
 vﬁ©ûe("addÅ0,t0,%0" :: "r"(
c⁄figTICK_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
));

695 
__asm
 vﬁ©ûe("sdÅ0,0(%0)"::"r"
mtimecmp
);

696 
	}
}

701 
	$vP‹tSëupTimî
()

703 
__asm
 vﬁ©ûe("ldÅ0,0(%0)"::"r"
mtime
);

704 
__asm
 vﬁ©ûe("addÅ0,t0,%0"::"r"(
c⁄figTICK_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
));

705 
__asm
 vﬁ©ûe("sdÅ0,0(%0)"::"r"
mtimecmp
);

708 
__asm
 volatile("csrs mie,%0"::"r"(0x80));

709 
	}
}

711 
	$vP‹tSysTickH™dÀr
( )

713 
	`¥vSëNextTimîI¡îru±
();

716 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

718 
	`vTaskSwôchC⁄ãxt
();

720 
	}
}

721 
	$¥vCheckF‹VÆidLi°AndQueue
( )

723 if–
xTimîQueue
 =
NULL
 )

725 
	`vLi°Inôüli£
–&
xA˘iveTimîLi°1
 );

726 
	`vLi°Inôüli£
–&
xA˘iveTimîLi°2
 );

727 
pxCuºítTimîLi°
 = &
xA˘iveTimîLi°1
;

728 
pxOvîÊowTimîLi°
 = &
xA˘iveTimîLi°2
;

729 
xTimîQueue
 = 
	`xQueueCª©e
––
UBa£Ty≥_t
 ) 
c⁄figTIMER_QUEUE_LENGTH
, –
D´m⁄TaskMesßge_t
 ) );

731 if–
xTimîQueue
 !
NULL
 )

733 
	`vQueueAddToRegi°ry
–
xTimîQueue
, "TmrQ" );

737 
	}
}

	@kernel/main.c

1 
	~<hóp.h
>

2 
	~<queue.h
>

3 
	~<comm⁄.h
>

4 
	~<èsk.h
>

5 
	~<time.h
>

7 
	#maöCHECK_TIMER_PERIOD_MS
 ( 3000UL / 
p‹tTICK_PERIOD_MS
 )

	)

8 
	#maöDONT_BLOCK
 ( 0UL )

	)

9 
Ba£Ty≥_t
 
	gxD©a
 = 0;

10 
Te°Progøm
();

11 
¥vCheckTimîCÆlback
();

12 
	$vSysˇŒInô
()

14 
TimîH™dÀ_t
 
xCheckTimî
 = 
NULL
;

16 
	`xTaskCª©e
–
Te°Progøm
, "Te°Progøm", 4096, 
NULL
, 20, NULL );

18 
xCheckTimî
 = 
	`xTimîCª©e
–"CheckTimî",–
maöCHECK_TIMER_PERIOD_MS
 ),
pdTRUE
,–* ) 0,
¥vCheckTimîCÆlback
);

20 if–
xCheckTimî
 !
NULL
 )

22 
	`xTimîSèπ
–
xCheckTimî
, 
maöDONT_BLOCK
 );

26 
	`vTaskSèπScheduÀr
();

27 
	}
}

29 
	$Te°Progøm
()

32 
Ba£Ty≥_t
 
a
 =1;

33 
QueueH™dÀ_t
 
ã°queuë
;

34 
ã°queuë
 = 
	`xQueueCª©e
–
bktQUEUE_LENGTH
, –
Ba£Ty≥_t
 ) );

35 
	`xQueueSíd
(
ã°queuë
,&
a
,0);

36 if–
	`xQueueRe˚ive
–
ã°queuë
, &
xD©a
, 0 ) !
îrQUEUE_EMPTY
 )

40 
	}
}

41 
	$¥vCheckTimîCÆlback
()

43 
a
=0;

44 
	}
}

	@schedule/include/task.h

1 
	sxTIME_OUT


3 
Ba£Ty≥_t
 
	mxOvîÊowCou¡
;

4 
TickTy≥_t
 
	mxTimeOnE¡îög
;

5 } 
	tTimeOut_t
;

10 
	sxMEMORY_REGION


12 * 
	mpvBa£Addªss
;

13 
uöt32_t
 
	mulLígthInByãs
;

14 
uöt32_t
 
	mulP¨amëîs
;

15 } 
	tMem‹yRegi⁄_t
;

	@schedule/src/task.c

1 
	~<èsk.h
>

2 
	~<comm⁄.h
>

3 
	#p‹tBYTE_ALIGNMENT_MASK
 (0x001f)

	)

4 vﬁ©ûê
Ba£Ty≥_t
 
	gxScheduÀrRu¬ög
 = 
pdFALSE
;

5 vﬁ©ûê
UBa£Ty≥_t
 
	guxT›RódyPri‹ôy
 = 
tskIDLE_PRIORITY
;

6 
Li°_t
 
	gpxRódyTasksLi°s
[ 
c⁄figMAX_PRIORITIES
 ];

7 
Li°_t
 
	gxDñayedTaskLi°1
;

8 
Li°_t
 
	gxDñayedTaskLi°2
;

9 
Li°_t
 * vﬁ©ûê
	gpxDñayedTaskLi°
;

10 
Li°_t
 * vﬁ©ûê
	gpxOvîÊowDñayedTaskLi°
;

11 
Li°_t
 
	gxPídögRódyLi°
;

12 vﬁ©ûê
UBa£Ty≥_t
 
	guxCuºítNumbîOfTasks
 = ( UBaseType_t ) 0U;

13 vﬁ©ûê
TickTy≥_t
 
	gxTickCou¡
 = ( TickType_t ) 0U;

15 
Li°_t
 
	gxSu•ídedTaskLi°
;

17 vﬁ©ûê
UBa£Ty≥_t
 
	guxPídedTicks
 = ( UBaseType_t ) 0U;

18 vﬁ©ûê
Ba£Ty≥_t
 
	gxYõldPídög
 = 
pdFALSE
;

19 vﬁ©ûê
Ba£Ty≥_t
 
	gxNumOfOvîÊows
 = ( BaseType_t ) 0;

20 
UBa£Ty≥_t
 
	guxTaskNumbî
 = ( UBaseType_t ) 0U;

21 vﬁ©ûê
TickTy≥_t
 
	gxNextTaskUnblockTime
 = ( TickType_t ) 0U;

22 
TCB_t
 * vﬁ©ûê
	gpxCuºítTCB
 = 
NULL
;

26 
	#èskSELECT_HIGHEST_PRIORITY_TASK
() \

28 
UBa£Ty≥_t
 
uxT›Pri‹ôy
 = 
uxT›RódyPri‹ôy
; \

31  
	`li°LIST_IS_EMPTY
–&–
pxRódyTasksLi°s
[ 
uxT›Pri‹ôy
 ] ) ) ) \

33 --
uxT›Pri‹ôy
; \

38 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxCuºítTCB
, &–
pxRódyTasksLi°s
[ 
uxT›Pri‹ôy
 ] ) ); \

39 
uxT›RódyPri‹ôy
 = 
uxT›Pri‹ôy
; \

40 }

	)

42 
	#èskRECORD_READY_PRIORITY
–
uxPri‹ôy
 ) \

44 if––
uxPri‹ôy
 ) > 
uxT›RódyPri‹ôy
 ) \

46 
uxT›RódyPri‹ôy
 = ( 
uxPri‹ôy
 ); \

48 }

	)

51 
	#¥vAddTaskToRódyLi°
–
pxTCB
 ) \

52 
	`èskRECORD_READY_PRIORITY
––
pxTCB
 )->
uxPri‹ôy
 ); \

53 
	`vLi°In£πEnd
–&–
pxRódyTasksLi°s
[ ( 
pxTCB
 )->
uxPri‹ôy
 ] ), &––pxTCB )->
xSèãLi°Iãm
 ) ); \

54 

	)

55 
	$vTaskI¡î«lSëTimeOutSèã
–
TimeOut_t
 * c⁄° 
pxTimeOut
 )

58 
pxTimeOut
->
xOvîÊowCou¡
 = 
xNumOfOvîÊows
;

59 
pxTimeOut
->
xTimeOnE¡îög
 = 
xTickCou¡
;

60 
	}
}

62 
Ba£Ty≥_t
 
	$xTaskCª©e
–
TaskFun˘i⁄_t
 
pxTaskCode
,

63 c⁄° * c⁄° 
pcName
,

64 c⁄° 
c⁄figSTACK_DEPTH_TYPE
 
usSèckDïth
,

65 * c⁄° 
pvP¨amëîs
,

66 
UBa£Ty≥_t
 
uxPri‹ôy
,

67 
TaskH™dÀ_t
 * c⁄° 
pxCª©edTask
 )

69 
TCB_t
 * 
pxNewTCB
;

70 
Ba£Ty≥_t
 
xRëu∫
;

75 #i‡–
p‹tSTACK_GROWTH
 > 0 )

80 
pxNewTCB
 = ( 
TCB_t
 * ) 
	`pvP‹tMÆloc
( ( TCB_t ) );

82 if–
pxNewTCB
 !
NULL
 )

87 
pxNewTCB
->
pxSèck
 = ( 
SèckTy≥_t
 * ) 
	`pvP‹tMÆloc
––––
size_t
 ) 
usSèckDïth
 ) * ( StackType_t ) ) );

89 if–
pxNewTCB
->
pxSèck
 =
NULL
 )

92 
	`vP‹tFªe
–
pxNewTCB
 );

93 
pxNewTCB
 = 
NULL
;

99 
SèckTy≥_t
 * 
pxSèck
;

102 
pxSèck
 = 
	`pvP‹tMÆloc
––––
size_t
 ) 
usSèckDïth
 ) * –
SèckTy≥_t
 ) ) );

104 if–
pxSèck
 !
NULL
 )

107 
pxNewTCB
 = ( 
TCB_t
 * ) 
	`pvP‹tMÆloc
( ( TCB_t ) );

109 if–
pxNewTCB
 !
NULL
 )

112 
pxNewTCB
->
pxSèck
 =ÖxStack;

118 
	`vP‹tFªe
–
pxSèck
 );

123 
pxNewTCB
 = 
NULL
;

128 if–
pxNewTCB
 !
NULL
 )

130 #i‡–
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 != 0 )

134 
pxNewTCB
->
ucSètiˇŒyAŒoˇãd
 = 
tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB
;

138 
	`¥vInôüli£NewTask
–
pxTaskCode
, 
pcName
, ( 
uöt32_t
 ) 
usSèckDïth
, 
pvP¨amëîs
, 
uxPri‹ôy
, 
pxCª©edTask
, 
pxNewTCB
, 
NULL
 );

139 
	`¥vAddNewTaskToRódyLi°
–
pxNewTCB
 );

140 
xRëu∫
 = 
pdPASS
;

144 
xRëu∫
 = 
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
;

147  
xRëu∫
;

148 
	}
}

150 
	$¥vInôüli£NewTask
–
TaskFun˘i⁄_t
 
pxTaskCode
,

151 c⁄° * c⁄° 
pcName
,

152 c⁄° 
uöt32_t
 
ulSèckDïth
,

153 * c⁄° 
pvP¨amëîs
,

154 
UBa£Ty≥_t
 
uxPri‹ôy
,

155 
TaskH™dÀ_t
 * c⁄° 
pxCª©edTask
,

156 
TCB_t
 * 
pxNewTCB
,

157 c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
xRegi⁄s
 )

159 
SèckTy≥_t
 * 
pxT›OfSèck
;

160 
UBa£Ty≥_t
 
x
;

162 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

164 
Ba£Ty≥_t
 
xRunPrivûeged
;

166 if––
uxPri‹ôy
 & 
p‹tPRIVILEGE_BIT
 ) != 0U )

168 
xRunPrivûeged
 = 
pdTRUE
;

172 
xRunPrivûeged
 = 
pdFALSE
;

174 
uxPri‹ôy
 &~
p‹tPRIVILEGE_BIT
;

178 #i‡–
tskSET_NEW_STACKS_TO_KNOWN_VALUE
 == 1 )

181 –Ë
	`mem£t
–
pxNewTCB
->
pxSèck
, ( Ë
tskSTACK_FILL_BYTE
, ( 
size_t
 ) 
ulSèckDïth
 * –
SèckTy≥_t
 ) );

189 #i‡–
p‹tSTACK_GROWTH
 < 0 )

191 
pxT›OfSèck
 = &–
pxNewTCB
->
pxSèck
[ 
ulSèckDïth
 - ( 
uöt32_t
 ) 1 ] );

192 
pxT›OfSèck
 = ( 
SèckTy≥_t
 * ) ( ( ( 
p‹tPOINTER_SIZE_TYPE
 )ÖxT›OfSèck ) & ( ~––p‹tPOINTER_SIZE_TYPE ) 
p‹tBYTE_ALIGNMENT_MASK
 ) ) );

196 #i‡–
c⁄figRECORD_STACK_HIGH_ADDRESS
 == 1 )

200 
pxNewTCB
->
pxEndOfSèck
 = 
pxT›OfSèck
;

206 
pxT›OfSèck
 = 
pxNewTCB
->
pxSèck
;

211 
pxNewTCB
->
pxEndOfSèck
 =ÖxNewTCB->
pxSèck
 + ( 
ulSèckDïth
 - ( 
uöt32_t
 ) 1 );

216 if–
pcName
 !
NULL
 )

218  
x
 = ( 
UBa£Ty≥_t
 ) 0; x < ( UBa£Ty≥_àË
c⁄figMAX_TASK_NAME_LEN
; x++ )

220 
pxNewTCB
->
pcTaskName
[ 
x
 ] = 
pcName
[ x ];

225 if–
pcName
[ 
x
 ] == ( ) 0x00 )

231 
	`mtCOVERAGE_TEST_MARKER
();

237 
pxNewTCB
->
pcTaskName
[ 
c⁄figMAX_TASK_NAME_LEN
 - 1 ] = '\0';

243 
pxNewTCB
->
pcTaskName
[ 0 ] = 0x00;

248 if–
uxPri‹ôy
 >–
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 )

250 
uxPri‹ôy
 = ( 
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( UBaseType_t ) 1U;

254 
	`mtCOVERAGE_TEST_MARKER
();

257 
pxNewTCB
->
uxPri‹ôy
 = uxPriority;

258 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

260 
pxNewTCB
->
uxBa£Pri‹ôy
 = 
uxPri‹ôy
;

261 
pxNewTCB
->
uxMuãxesHñd
 = 0;

265 
	`vLi°Inôüli£Iãm
–&–
pxNewTCB
->
xSèãLi°Iãm
 ) );

266 
	`vLi°Inôüli£Iãm
–&–
pxNewTCB
->
xEvítLi°Iãm
 ) );

270 
	`li°SET_LIST_ITEM_OWNER
–&–
pxNewTCB
->
xSèãLi°Iãm
 ),ÖxNewTCB );

273 
	`li°SET_LIST_ITEM_VALUE
–&–
pxNewTCB
->
xEvítLi°Iãm
 ), ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àË
uxPri‹ôy
 );

274 
	`li°SET_LIST_ITEM_OWNER
–&–
pxNewTCB
->
xEvítLi°Iãm
 ),ÖxNewTCB );

276 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

278 
pxNewTCB
->
uxCrôiˇlNe°ög
 = ( 
UBa£Ty≥_t
 ) 0U;

282 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

284 
pxNewTCB
->
pxTaskTag
 = 
NULL
;

288 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

290 
pxNewTCB
->
ulRunTimeCou¡î
 = 0UL;

294 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

296 
	`vP‹tSt‹eTaskMPUSëtögs
–&–
pxNewTCB
->
xMPUSëtögs
 ), 
xRegi⁄s
,ÖxNewTCB->
pxSèck
, 
ulSèckDïth
 );

301 –Ë
xRegi⁄s
;

305 #i‡–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 != 0 )

307 
	`mem£t
––* ) &–
pxNewTCB
->
pvThªadLoˇlSt‹agePoöãrs
[ 0 ] ), 0x00, (ÖxNewTCB->pvThreadLocalStoragePointers ) );

311 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

313 
	`mem£t
––* ) &–
pxNewTCB
->
ulNŸifõdVÆue
[ 0 ] ), 0x00, (ÖxNewTCB->ulNotifiedValue ) );

314 
	`mem£t
––* ) &–
pxNewTCB
->
ucNŸifySèã
[ 0 ] ), 0x00, (ÖxNewTCB->ucNotifyState ) );

318 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

323 
	`_REENT_INIT_PTR
––&–
pxNewTCB
->
xNewLib_ªít
 ) ) );

327 #i‡–
INCLUDE_xTaskAb‹tDñay
 == 1 )

329 
pxNewTCB
->
ucDñayAb‹ãd
 = 
pdFALSE
;

337 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

342 #i‡–
p‹tHAS_STACK_OVERFLOW_CHECKING
 == 1 )

344 #i‡–
p‹tSTACK_GROWTH
 < 0 )

346 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck,ÖxNewTCB->
pxSèck
, 
pxTaskCode
, 
pvP¨amëîs
, 
xRunPrivûeged
 );

350 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck,ÖxNewTCB->
pxEndOfSèck
, 
pxTaskCode
, 
pvP¨amëîs
, 
xRunPrivûeged
 );

356 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck, 
pxTaskCode
, 
pvP¨amëîs
, 
xRunPrivûeged
 );

365 #i‡–
p‹tHAS_STACK_OVERFLOW_CHECKING
 == 1 )

367 #i‡–
p‹tSTACK_GROWTH
 < 0 )

369 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck,ÖxNewTCB->
pxSèck
, 
pxTaskCode
, 
pvP¨amëîs
 );

373 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck,ÖxNewTCB->
pxEndOfSèck
, 
pxTaskCode
, 
pvP¨amëîs
 );

379 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck, 
pxTaskCode
, 
pvP¨amëîs
 );

385 if–
pxCª©edTask
 !
NULL
 )

389 *
pxCª©edTask
 = ( 
TaskH™dÀ_t
 ) 
pxNewTCB
;

393 
	`mtCOVERAGE_TEST_MARKER
();

395 
	}
}

397 
	$¥vAddNewTaskToRódyLi°
–
TCB_t
 * 
pxNewTCB
 )

401 
	`èskENTER_CRITICAL
();

403 
uxCuºítNumbîOfTasks
++;

405 if–
pxCuºítTCB
 =
NULL
 )

409 
pxCuºítTCB
 = 
pxNewTCB
;

411 if–
uxCuºítNumbîOfTasks
 =–
UBa£Ty≥_t
 ) 1 )

416 
	`¥vInôüli£TaskLi°s
();

420 
	`mtCOVERAGE_TEST_MARKER
();

428 if–
xScheduÀrRu¬ög
 =
pdFALSE
 )

430 if–
pxCuºítTCB
->
uxPri‹ôy
 <
pxNewTCB
->uxPriority )

432 
pxCuºítTCB
 = 
pxNewTCB
;

436 
	`mtCOVERAGE_TEST_MARKER
();

441 
	`mtCOVERAGE_TEST_MARKER
();

445 
uxTaskNumbî
++;

447 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

450 
pxNewTCB
->
uxTCBNumbî
 = 
uxTaskNumbî
;

453 
	`åa˚TASK_CREATE
–
pxNewTCB
 );

455 
	`¥vAddTaskToRódyLi°
–
pxNewTCB
 );

458 
	`èskEXIT_CRITICAL
();

460 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

464 if–
pxCuºítTCB
->
uxPri‹ôy
 < 
pxNewTCB
->uxPriority )

466 
	`èskYIELD_IF_USING_PREEMPTION
();

470 
	`mtCOVERAGE_TEST_MARKER
();

475 
	`mtCOVERAGE_TEST_MARKER
();

477 
	}
}

479 
	$¥vInôüli£TaskLi°s
( )

481 
UBa£Ty≥_t
 
uxPri‹ôy
;

483  
uxPri‹ôy
 = ( 
UBa£Ty≥_t
 ) 0U; uxPri‹ôy < ( UBa£Ty≥_àË
c⁄figMAX_PRIORITIES
; uxPriority++ )

485 
	`vLi°Inôüli£
–&–
pxRódyTasksLi°s
[ 
uxPri‹ôy
 ] ) );

488 
	`vLi°Inôüli£
–&
xDñayedTaskLi°1
 );

489 
	`vLi°Inôüli£
–&
xDñayedTaskLi°2
 );

490 
	`vLi°Inôüli£
–&
xPídögRódyLi°
 );

492 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

494 
	`vLi°Inôüli£
–&
xTasksWaôögTîmö©i⁄
 );

498 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

500 
	`vLi°Inôüli£
–&
xSu•ídedTaskLi°
 );

506 
pxDñayedTaskLi°
 = &
xDñayedTaskLi°1
;

507 
pxOvîÊowDñayedTaskLi°
 = &
xDñayedTaskLi°2
;

508 
	}
}

511 
	$vTaskSwôchC⁄ãxt
( )

513 if–
uxScheduÀrSu•íded
 !–
UBa£Ty≥_t
 ) 
pdFALSE
 )

517 
xYõldPídög
 = 
pdTRUE
;

521 
xYõldPídög
 = 
pdFALSE
;

522 
	`åa˚TASK_SWITCHED_OUT
();

524 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

526 #ifde‡
p‹tALT_GET_RUN_TIME_COUNTER_VALUE


527 
	`p‹tALT_GET_RUN_TIME_COUNTER_VALUE
–
ulTŸÆRunTime
 );

529 
ulTŸÆRunTime
 = 
	`p‹tGET_RUN_TIME_COUNTER_VALUE
();

539 if–
ulTŸÆRunTime
 > 
ulTaskSwôchedInTime
 )

541 
pxCuºítTCB
->
ulRunTimeCou¡î
 +–
ulTŸÆRunTime
 - 
ulTaskSwôchedInTime
 );

545 
	`mtCOVERAGE_TEST_MARKER
();

548 
ulTaskSwôchedInTime
 = 
ulTŸÆRunTime
;

553 
	`èskCHECK_FOR_STACK_OVERFLOW
();

556 #i‡–
c⁄figUSE_POSIX_ERRNO
 == 1 )

558 
pxCuºítTCB
->
iTaskEºno
 = 
FªeRTOS_î∫o
;

564 
	`èskSELECT_HIGHEST_PRIORITY_TASK
();

565 
	`åa˚TASK_SWITCHED_IN
();

568 #i‡–
c⁄figUSE_POSIX_ERRNO
 == 1 )

570 
FªeRTOS_î∫o
 = 
pxCuºítTCB
->
iTaskEºno
;

574 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

580 
_impuª_±r
 = &–
pxCuºítTCB
->
xNewLib_ªít
 );

584 
	}
}

586 
	$vTaskSèπScheduÀr
( )

588 
Ba£Ty≥_t
 
xRëu∫
;

591 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

593 
SèticTask_t
 * 
pxIdÀTaskTCBBuf„r
 = 
NULL
;

594 
SèckTy≥_t
 * 
pxIdÀTaskSèckBuf„r
 = 
NULL
;

595 
uöt32_t
 
ulIdÀTaskSèckSize
;

599 
	`vAµliˇti⁄GëIdÀTaskMem‹y
–&
pxIdÀTaskTCBBuf„r
, &
pxIdÀTaskSèckBuf„r
, &
ulIdÀTaskSèckSize
 );

600 
xIdÀTaskH™dÀ
 = 
	`xTaskCª©eSètic
–
¥vIdÀTask
,

601 
c⁄figIDLE_TASK_NAME
,

602 
ulIdÀTaskSèckSize
,

603 –* ) 
NULL
,

604 
p‹tPRIVILEGE_BIT
,

605 
pxIdÀTaskSèckBuf„r
,

606 
pxIdÀTaskTCBBuf„r
 );

608 if–
xIdÀTaskH™dÀ
 !
NULL
 )

610 
xRëu∫
 = 
pdPASS
;

614 
xRëu∫
 = 
pdFAIL
;

620 
xRëu∫
 = 
	`xTaskCª©e
–
¥vIdÀTask
,

621 
c⁄figIDLE_TASK_NAME
,

622 
c⁄figMINIMAL_STACK_SIZE
,

623 –* ) 
NULL
,

624 
p‹tPRIVILEGE_BIT
,

625 &
xIdÀTaskH™dÀ
 );

629 #i‡–
c⁄figUSE_TIMERS
 == 1 )

631 if–
xRëu∫
 =
pdPASS
 )

633 
xRëu∫
 = 
	`xTimîCª©eTimîTask
();

637 
	`mtCOVERAGE_TEST_MARKER
();

642 if–
xRëu∫
 =
pdPASS
 )

647 #ifde‡
FREERTOS_TASKS_C_ADDITIONS_INIT


649 
	`‰ìπos_èsks_c_addôi⁄s_öô
();

658 
	`p‹tDISABLE_INTERRUPTS
();

660 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

666 
_impuª_±r
 = &–
pxCuºítTCB
->
xNewLib_ªít
 );

670 
xNextTaskUnblockTime
 = 
p‹tMAX_DELAY
;

671 
xScheduÀrRu¬ög
 = 
pdTRUE
;

672 
xTickCou¡
 = ( 
TickTy≥_t
 ) 
c⁄figINITIAL_TICK_COUNT
;

680 
	`p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
();

682 
	`åa˚TASK_SWITCHED_IN
();

686 if–
	`xP‹tSèπScheduÀr
(Ë!
pdFALSE
 )

705 –Ë
xIdÀTaskH™dÀ
;

706 
	}
}

708 
Ba£Ty≥_t
 
	$xTaskRemoveFromEvítLi°
–c⁄° 
Li°_t
 * c⁄° 
pxEvítLi°
 )

710 
TCB_t
 * 
pxUnblockedTCB
;

711 
Ba£Ty≥_t
 
xRëu∫
;

726 
pxUnblockedTCB
 = 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxEvítLi°
 );

727 –Ë
	`uxLi°Remove
–&–
pxUnblockedTCB
->
xEvítLi°Iãm
 ) );

729 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

731 –Ë
	`uxLi°Remove
–&–
pxUnblockedTCB
->
xSèãLi°Iãm
 ) );

732 
	`¥vAddTaskToRódyLi°
–
pxUnblockedTCB
 );

734 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

744 
	`¥vRe£tNextTaskUnblockTime
();

752 
	`vLi°In£πEnd
–&–
xPídögRódyLi°
 ), &–
pxUnblockedTCB
->
xEvítLi°Iãm
 ) );

755 if–
pxUnblockedTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

760 
xRëu∫
 = 
pdTRUE
;

764 
xYõldPídög
 = 
pdTRUE
;

768 
xRëu∫
 = 
pdFALSE
;

771  
xRëu∫
;

772 
	}
}

774 
Ba£Ty≥_t
 
	$xTaskCheckF‹TimeOut
–
TimeOut_t
 * c⁄° 
pxTimeOut
,

775 
TickTy≥_t
 * c⁄° 
pxTicksToWaô
 )

777 
Ba£Ty≥_t
 
xRëu∫
;

780 
	`èskENTER_CRITICAL
();

783 c⁄° 
TickTy≥_t
 
xC⁄°TickCou¡
 = 
xTickCou¡
;

784 c⁄° 
TickTy≥_t
 
xEœp£dTime
 = 
xC⁄°TickCou¡
 - 
pxTimeOut
->
xTimeOnE¡îög
;

786 #i‡–
INCLUDE_xTaskAb‹tDñay
 == 1 )

787 if–
pxCuºítTCB
->
ucDñayAb‹ãd
 !–
uöt8_t
 ) 
pdFALSE
 )

791 
pxCuºítTCB
->
ucDñayAb‹ãd
 = 
pdFALSE
;

792 
xRëu∫
 = 
pdTRUE
;

797 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

798 if–*
pxTicksToWaô
 =
p‹tMAX_DELAY
 )

803 
xRëu∫
 = 
pdFALSE
;

808 if––
xNumOfOvîÊows
 !
pxTimeOut
->
xOvîÊowCou¡
 ) && ( 
xC⁄°TickCou¡
 >pxTimeOut->
xTimeOnE¡îög
 ) )

815 
xRëu∫
 = 
pdTRUE
;

816 *
pxTicksToWaô
 = ( 
TickTy≥_t
 ) 0;

818 if–
xEœp£dTime
 < *
pxTicksToWaô
 )

821 *
pxTicksToWaô
 -
xEœp£dTime
;

822 
	`vTaskI¡î«lSëTimeOutSèã
–
pxTimeOut
 );

823 
xRëu∫
 = 
pdFALSE
;

827 *
pxTicksToWaô
 = ( 
TickTy≥_t
 ) 0;

828 
xRëu∫
 = 
pdTRUE
;

831 
	`èskEXIT_CRITICAL
();

833  
xRëu∫
;

834 
	}
}

837 
	$vTaskPœ˚OnEvítLi°
–
Li°_t
 * c⁄° 
pxEvítLi°
,

838 c⁄° 
TickTy≥_t
 
xTicksToWaô
 )

848 
	`vLi°In£π
–
pxEvítLi°
, &–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

850 
	`¥vAddCuºítTaskToDñayedLi°
–
xTicksToWaô
, 
pdTRUE
 );

851 
	}
}

855 
	$¥vAddCuºítTaskToDñayedLi°
–
TickTy≥_t
 
xTicksToWaô
,

856 c⁄° 
Ba£Ty≥_t
 
xC™BlockIndeföôñy
 )

858 
TickTy≥_t
 
xTimeToWake
;

859 c⁄° 
TickTy≥_t
 
xC⁄°TickCou¡
 = 
xTickCou¡
;

861 #i‡–
INCLUDE_xTaskAb‹tDñay
 == 1 )

866 
pxCuºítTCB
->
ucDñayAb‹ãd
 = 
pdFALSE
;

872 if–
	`uxLi°Remove
–&–
pxCuºítTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

876 
	`p‹tRESET_READY_PRIORITY
–
pxCuºítTCB
->
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 );

879 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

881 if––
xTicksToWaô
 =
p‹tMAX_DELAY
 ) && ( 
xC™BlockIndeföôñy
 !
pdFALSE
 ) )

886 
	`vLi°In£πEnd
–&
xSu•ídedTaskLi°
, &–
pxCuºítTCB
->
xSèãLi°Iãm
 ) );

893 
xTimeToWake
 = 
xC⁄°TickCou¡
 + 
xTicksToWaô
;

896 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xSèãLi°Iãm
 ), 
xTimeToWake
 );

898 if–
xTimeToWake
 < 
xC⁄°TickCou¡
 )

902 
	`vLi°In£π
–
pxOvîÊowDñayedTaskLi°
, &–
pxCuºítTCB
->
xSèãLi°Iãm
 ) );

908 
	`vLi°In£π
–
pxDñayedTaskLi°
, &–
pxCuºítTCB
->
xSèãLi°Iãm
 ) );

913 if–
xTimeToWake
 < 
xNextTaskUnblockTime
 )

915 
xNextTaskUnblockTime
 = 
xTimeToWake
;

919 
	`mtCOVERAGE_TEST_MARKER
();

929 
xTimeToWake
 = 
xC⁄°TickCou¡
 + 
xTicksToWaô
;

932 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xSèãLi°Iãm
 ), 
xTimeToWake
 );

934 if–
xTimeToWake
 < 
xC⁄°TickCou¡
 )

937 
	`vLi°In£π
–
pxOvîÊowDñayedTaskLi°
, &–
pxCuºítTCB
->
xSèãLi°Iãm
 ) );

942 
	`vLi°In£π
–
pxDñayedTaskLi°
, &–
pxCuºítTCB
->
xSèãLi°Iãm
 ) );

947 if–
xTimeToWake
 < 
xNextTaskUnblockTime
 )

949 
xNextTaskUnblockTime
 = 
xTimeToWake
;

956 
	}
}

959 
Ba£Ty≥_t
 
	$xTaskIn¸emítTick
( )

961 
TCB_t
 * 
pxTCB
;

962 
TickTy≥_t
 
xIãmVÆue
;

963 
Ba£Ty≥_t
 
xSwôchRequúed
 = 
pdFALSE
;

968 
	`åa˚TASK_INCREMENT_TICK
–
xTickCou¡
 );

970 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

974 c⁄° 
TickTy≥_t
 
xC⁄°TickCou¡
 = 
xTickCou¡
 + ( TickType_t ) 1;

978 
xTickCou¡
 = 
xC⁄°TickCou¡
;

980 if–
xC⁄°TickCou¡
 =–
TickTy≥_t
 ) 0U )

982 
	`èskSWITCH_DELAYED_LISTS
();

986 
	`mtCOVERAGE_TEST_MARKER
();

993 if–
xC⁄°TickCou¡
 >
xNextTaskUnblockTime
 )

997 if–
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) !
pdFALSE
 )

1004 
xNextTaskUnblockTime
 = 
p‹tMAX_DELAY
;

1013 
pxTCB
 = 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxDñayedTaskLi°
 );

1014 
xIãmVÆue
 = 
	`li°GET_LIST_ITEM_VALUE
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

1016 if–
xC⁄°TickCou¡
 < 
xIãmVÆue
 )

1023 
xNextTaskUnblockTime
 = 
xIãmVÆue
;

1028 
	`mtCOVERAGE_TEST_MARKER
();

1032 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

1036 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

1038 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

1042 
	`mtCOVERAGE_TEST_MARKER
();

1047 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

1051 #i‡–
c⁄figUSE_PREEMPTION
 == 1 )

1057 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

1059 
xSwôchRequúed
 = 
pdTRUE
;

1063 
	`mtCOVERAGE_TEST_MARKER
();

1074 #i‡––
c⁄figUSE_PREEMPTION
 =1 ) && ( 
c⁄figUSE_TIME_SLICING
 == 1 ) )

1076 if–
	`li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
pxCuºítTCB
->
uxPri‹ôy
 ] ) ) > ( 
UBa£Ty≥_t
 ) 1 )

1078 
xSwôchRequúed
 = 
pdTRUE
;

1082 
	`mtCOVERAGE_TEST_MARKER
();

1087 #i‡–
c⁄figUSE_TICK_HOOK
 == 1 )

1091 if–
xPídedTicks
 =–
TickTy≥_t
 ) 0 )

1093 
	`vAµliˇti⁄TickHook
();

1097 
	`mtCOVERAGE_TEST_MARKER
();

1102 #i‡–
c⁄figUSE_PREEMPTION
 == 1 )

1104 if–
xYõldPídög
 !
pdFALSE
 )

1106 
xSwôchRequúed
 = 
pdTRUE
;

1110 
	`mtCOVERAGE_TEST_MARKER
();

1117 ++
xPídedTicks
;

1121 #i‡–
c⁄figUSE_TICK_HOOK
 == 1 )

1123 
	`vAµliˇti⁄TickHook
();

1128  
xSwôchRequúed
;

1129 
	}
}

1131 
TickTy≥_t
 
	$xTaskGëTickCou¡
( )

1133 
TickTy≥_t
 
xTicks
;

1136 
	`p‹tTICK_TYPE_ENTER_CRITICAL
();

1138 
xTicks
 = 
xTickCou¡
;

1140 
	`p‹tTICK_TYPE_EXIT_CRITICAL
();

1142  
xTicks
;

1143 
	}
}

1145 
Ba£Ty≥_t
 
	$xTaskGëScheduÀrSèã
( )

1147 
Ba£Ty≥_t
 
xRëu∫
;

1149 if–
xScheduÀrRu¬ög
 =
pdFALSE
 )

1151 
xRëu∫
 = 
èskSCHEDULER_NOT_STARTED
;

1155 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

1157 
xRëu∫
 = 
èskSCHEDULER_RUNNING
;

1161 
xRëu∫
 = 
èskSCHEDULER_SUSPENDED
;

1165  
xRëu∫
;

1166 
	}
}

1168 
	$p‹tTASK_FUNCTION
–
¥vIdÀTask
, 
pvP¨amëîs
 )

1172 if–
	`li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
tskIDLE_PRIORITY
 ] ) ) > ( 
UBa£Ty≥_t
 ) 1 )

1174 
	`èskYIELD
();

1177 
	}
}

	@/usr/include/time.h

22 #i‚def 
_TIME_H


23 
	#_TIME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

33 
	~<bôs/time.h
>

37 
	~<bôs/ty≥s/˛ock_t.h
>

38 
	~<bôs/ty≥s/time_t.h
>

39 
	~<bôs/ty≥s/°ru˘_tm.h
>

41 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_ISOC11


42 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

45 #ifde‡
__USE_POSIX199309


46 
	~<bôs/ty≥s/˛ockid_t.h
>

47 
	~<bôs/ty≥s/timî_t.h
>

48 
	~<bôs/ty≥s/°ru˘_ôimî•ec.h
>

49 
	gsigevít
;

52 #ifde‡
__USE_XOPEN2K


53 #i‚de‡
__pid_t_deföed


54 
__pid_t
 
	tpid_t
;

55 
	#__pid_t_deföed


	)

59 #ifde‡
__USE_XOPEN2K8


60 
	~<bôs/ty≥s/loˇÀ_t.h
>

63 #ifde‡
__USE_ISOC11


65 
	#TIME_UTC
 1

	)

68 
__BEGIN_DECLS


72 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

75 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

78 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

79 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

82 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

88 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
,

90 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

92 #ifde‡
__USE_XOPEN


95 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

96 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

97 
__THROW
;

100 #ifde‡
__USE_XOPEN2K8


104 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

105 c⁄° *
__ª°ri˘
 
__f‹m©
,

106 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

107 
loˇÀ_t
 
__loc
Ë
__THROW
;

110 #ifde‡
__USE_GNU


111 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

112 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

113 
loˇÀ_t
 
__loc
Ë
__THROW
;

119 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

123 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

125 #i‡
deföed
 
__USE_POSIX
 || 
	`__GLIBC_USE
 (
ISOC2X
)

128 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

129 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

133 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

134 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

139 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

142 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

144 #i‡
deföed
 
__USE_POSIX
 || 
	`__GLIBC_USE
 (
ISOC2X
)

149 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

150 *
__ª°ri˘
 
__buf
Ë
__THROW
;

153 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

154 *
__ª°ri˘
 
__buf
Ë
__THROW
;

159 *
__tz«me
[2];

160 
__daylight
;

161 
__timez⁄e
;

164 #ifdef 
__USE_POSIX


166 *
tz«me
[2];

170 
	$tz£t
 (Ë
__THROW
;

173 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


174 
daylight
;

175 
timez⁄e
;

181 
	#__i¶óp
(
yór
) \

182 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

185 #ifde‡
__USE_MISC


190 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

193 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

196 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

200 #ifde‡
__USE_POSIX199309


205 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

206 
time•ec
 *
__ªmaöög
);

210 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

213 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

216 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

217 
__THROW
;

219 #ifde‡
__USE_XOPEN2K


224 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

225 c⁄° 
time•ec
 *
__ªq
,

226 
time•ec
 *
__ªm
);

229 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

234 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

235 
sigevít
 *
__ª°ri˘
 
__evp
,

236 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

239 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

242 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

243 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

244 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

247 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

248 
__THROW
;

251 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

255 #ifde‡
__USE_ISOC11


257 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1));

262 #ifde‡
__USE_XOPEN_EXTENDED


274 
gëd©e_îr
;

283 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

286 #ifde‡
__USE_GNU


297 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

298 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

301 
__END_DECLS


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

120 #unde‡
__USE_ISOC11


121 #unde‡
__USE_ISOC99


122 #unde‡
__USE_ISOC95


123 #unde‡
__USE_ISOCXX11


124 #unde‡
__USE_POSIX


125 #unde‡
__USE_POSIX2


126 #unde‡
__USE_POSIX199309


127 #unde‡
__USE_POSIX199506


128 #unde‡
__USE_XOPEN


129 #unde‡
__USE_XOPEN_EXTENDED


130 #unde‡
__USE_UNIX98


131 #unde‡
__USE_XOPEN2K


132 #unde‡
__USE_XOPEN2KXSI


133 #unde‡
__USE_XOPEN2K8


134 #unde‡
__USE_XOPEN2K8XSI


135 #unde‡
__USE_LARGEFILE


136 #unde‡
__USE_LARGEFILE64


137 #unde‡
__USE_FILE_OFFSET64


138 #unde‡
__USE_MISC


139 #unde‡
__USE_ATFILE


140 #unde‡
__USE_GNU


141 #unde‡
__USE_FORTIFY_LEVEL


142 #unde‡
__KERNEL_STRICT_NAMES


143 #unde‡
__GLIBC_USE_ISOC2X


144 #unde‡
__GLIBC_USE_DEPRECATED_GETS


145 #unde‡
__GLIBC_USE_DEPRECATED_SCANF


149 #i‚de‡
_LOOSE_KERNEL_NAMES


150 
	#__KERNEL_STRICT_NAMES


	)

160 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


161 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

162 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

164 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

171 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


172 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

173 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

175 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

179 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

185 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

186 && !
deföed
 
	g_DEFAULT_SOURCE


188 #unde‡
_DEFAULT_SOURCE


189 
	#_DEFAULT_SOURCE
 1

	)

193 #ifde‡
_GNU_SOURCE


194 #unde‡
_ISOC95_SOURCE


195 
	#_ISOC95_SOURCE
 1

	)

196 #unde‡
_ISOC99_SOURCE


197 
	#_ISOC99_SOURCE
 1

	)

198 #unde‡
_ISOC11_SOURCE


199 
	#_ISOC11_SOURCE
 1

	)

200 #unde‡
_ISOC2X_SOURCE


201 
	#_ISOC2X_SOURCE
 1

	)

202 #unde‡
_POSIX_SOURCE


203 
	#_POSIX_SOURCE
 1

	)

204 #unde‡
_POSIX_C_SOURCE


205 
	#_POSIX_C_SOURCE
 200809L

	)

206 #unde‡
_XOPEN_SOURCE


207 
	#_XOPEN_SOURCE
 700

	)

208 #unde‡
_XOPEN_SOURCE_EXTENDED


209 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

210 #unde‡
_LARGEFILE64_SOURCE


211 
	#_LARGEFILE64_SOURCE
 1

	)

212 #unde‡
_DEFAULT_SOURCE


213 
	#_DEFAULT_SOURCE
 1

	)

214 #unde‡
_ATFILE_SOURCE


215 
	#_ATFILE_SOURCE
 1

	)

220 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

221 || (!
deföed
 
	g__STRICT_ANSI__
 \

222 && !
deföed
 
	g_ISOC99_SOURCE
 && !deföed 
	g_ISOC11_SOURCE
 \

223 && !
deföed
 
	g_ISOC2X_SOURCE
 \

224 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

225 && !
deföed
 
	g_XOPEN_SOURCE
))

226 #unde‡
_DEFAULT_SOURCE


227 
	#_DEFAULT_SOURCE
 1

	)

231 #i‡(
deföed
 
_ISOC2X_SOURCE
 \

232 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ > 201710L))

233 
	#__GLIBC_USE_ISOC2X
 1

	)

235 
	#__GLIBC_USE_ISOC2X
 0

	)

239 #i‡(
deföed
 
_ISOC11_SOURCE
 || deföed 
_ISOC2X_SOURCE
 \

240 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

241 
	#__USE_ISOC11
 1

	)

245 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

246 || 
deföed
 
_ISOC2X_SOURCE
 \

247 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

248 
	#__USE_ISOC99
 1

	)

252 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

253 || 
deföed
 
_ISOC2X_SOURCE
 \

254 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

255 
	#__USE_ISOC95
 1

	)

258 #ifde‡
__˝lu•lus


260 #i‡
__˝lu•lus
 >= 201703L

261 
	#__USE_ISOC11
 1

	)

265 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


266 
	#__USE_ISOCXX11
 1

	)

267 
	#__USE_ISOC99
 1

	)

274 #ifde‡
_DEFAULT_SOURCE


275 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


276 
	#__USE_POSIX_IMPLICITLY
 1

	)

278 #unde‡
_POSIX_SOURCE


279 
	#_POSIX_SOURCE
 1

	)

280 #unde‡
_POSIX_C_SOURCE


281 
	#_POSIX_C_SOURCE
 200809L

	)

284 #i‡((!
deföed
 
__STRICT_ANSI__
 \

285 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

286 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

287 
	#_POSIX_SOURCE
 1

	)

288 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

289 
	#_POSIX_C_SOURCE
 2

	)

290 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

291 
	#_POSIX_C_SOURCE
 199506L

	)

292 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

293 
	#_POSIX_C_SOURCE
 200112L

	)

295 
	#_POSIX_C_SOURCE
 200809L

	)

297 
	#__USE_POSIX_IMPLICITLY
 1

	)

306 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

307 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

308 
	#_POSIX_SOURCE
 1

	)

309 #unde‡
_POSIX_C_SOURCE


310 
	#_POSIX_C_SOURCE
 199506L

	)

313 #i‡(
deföed
 
_POSIX_SOURCE
 \

314 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

315 || 
deföed
 
_XOPEN_SOURCE
)

316 
	#__USE_POSIX
 1

	)

319 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


320 
	#__USE_POSIX2
 1

	)

323 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

324 
	#__USE_POSIX199309
 1

	)

327 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

328 
	#__USE_POSIX199506
 1

	)

331 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

332 
	#__USE_XOPEN2K
 1

	)

333 #unde‡
__USE_ISOC95


334 
	#__USE_ISOC95
 1

	)

335 #unde‡
__USE_ISOC99


336 
	#__USE_ISOC99
 1

	)

339 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

340 
	#__USE_XOPEN2K8
 1

	)

341 #unde‡
_ATFILE_SOURCE


342 
	#_ATFILE_SOURCE
 1

	)

345 #ifdef 
_XOPEN_SOURCE


346 
	#__USE_XOPEN
 1

	)

347 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

348 
	#__USE_XOPEN_EXTENDED
 1

	)

349 
	#__USE_UNIX98
 1

	)

350 #unde‡
_LARGEFILE_SOURCE


351 
	#_LARGEFILE_SOURCE
 1

	)

352 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

353 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

354 
	#__USE_XOPEN2K8
 1

	)

355 
	#__USE_XOPEN2K8XSI
 1

	)

357 
	#__USE_XOPEN2K
 1

	)

358 
	#__USE_XOPEN2KXSI
 1

	)

359 #unde‡
__USE_ISOC95


360 
	#__USE_ISOC95
 1

	)

361 #unde‡
__USE_ISOC99


362 
	#__USE_ISOC99
 1

	)

365 #ifde‡
_XOPEN_SOURCE_EXTENDED


366 
	#__USE_XOPEN_EXTENDED
 1

	)

371 #ifde‡
_LARGEFILE_SOURCE


372 
	#__USE_LARGEFILE
 1

	)

375 #ifde‡
_LARGEFILE64_SOURCE


376 
	#__USE_LARGEFILE64
 1

	)

379 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

380 
	#__USE_FILE_OFFSET64
 1

	)

383 #i‡
deföed
 
_DEFAULT_SOURCE


384 
	#__USE_MISC
 1

	)

387 #ifdef 
_ATFILE_SOURCE


388 
	#__USE_ATFILE
 1

	)

391 #ifdef 
_GNU_SOURCE


392 
	#__USE_GNU
 1

	)

395 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

396 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

397 #i‡
_FORTIFY_SOURCE
 > 1

398 
	#__USE_FORTIFY_LEVEL
 2

	)

400 
	#__USE_FORTIFY_LEVEL
 1

	)

403 
	#__USE_FORTIFY_LEVEL
 0

	)

410 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


411 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

413 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

428 #i‡(
deföed
 
__USE_GNU
 \

429 && (
deföed
 
	g__˝lu•lus
 \

430 ? (
	g__˝lu•lus
 < 201103L && !
deföed
 
	g__GXX_EXPERIMENTAL_CXX0X__
) \

431 : (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 199901L)))

432 
	#__GLIBC_USE_DEPRECATED_SCANF
 1

	)

434 
	#__GLIBC_USE_DEPRECATED_SCANF
 0

	)

439 
	~<°dc-¥edef.h
>

447 #unde‡
__GNU_LIBRARY__


448 
	#__GNU_LIBRARY__
 6

	)

452 
	#__GLIBC__
 2

	)

453 
	#__GLIBC_MINOR__
 31

	)

455 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

456 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

459 #i‚de‡
__ASSEMBLER__


460 #i‚de‡
_SYS_CDEFS_H


461 
	~<sys/cdefs.h
>

466 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


467 
	#__USE_LARGEFILE
 1

	)

468 
	#__USE_LARGEFILE64
 1

	)

474 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

475 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

476 && 
deföed
 
	g__exã∫_ölöe


477 
	#__USE_EXTERN_INLINES
 1

	)

485 
	~<gnu/°ubs.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 
	#__STDC_ISO_10646__
 201706L

	)

	@
1
.
1
/usr/include
16
345
Common/include/FreeRTOS.h
Common/include/common.h
Common/include/list.h
Common/include/queue.h
Common/src/list.c
Common/src/queue.c
Memory/include/heap.h
Memory/src/heap.c
Softtime/include/time.h
Softtime/src/time.c
kernel/main.c
schedule/include/task.h
schedule/src/task.c
/usr/include/time.h
/usr/include/features.h
/usr/include/stdc-predef.h
